// Generated by dts-bundle-generator v8.0.1

/**
 * The possible definitions related to animals.
 */
export declare type AnimalDefinitions = LocaleEntry<{
	bear: string[];
	bird: string[];
	cat: string[];
	cetacean: string[];
	cow: string[];
	crocodilia: string[];
	dog: string[];
	fish: string[];
	horse: string[];
	insect: string[];
	lion: string[];
	rabbit: string[];
	rodent: string[];
	snake: string[];
	type: string[];
}>;
/**
 * The possible definitions related to colors.
 */
export declare type ColorDefinitions = LocaleEntry<{
	/**
	 * Human readable color names.
	 */
	human: string[];
	/**
	 * Color space names.
	 */
	space: string[];
}>;
/**
 * The possible definitions related to commerce.
 */
export declare type CommerceDefinitions = LocaleEntry<{
	/**
	 * Department names inside a shop.
	 */
	department: string[];
	/**
	 * Product name generation definitions.
	 */
	product_name: CommerceProductNameDefinitions;
	/**
	 * Descriptions for products.
	 */
	product_description: string[];
}>;
/**
 * The possible definitions related to product name generation.
 */
export interface CommerceProductNameDefinitions {
	/**
	 * Adjectives describing a product (e.g. tasty).
	 */
	adjective: string[];
	/**
	 * Materials describing a product (e.g. wood).
	 */
	material: string[];
	/**
	 * Types of products (e.g. chair).
	 */
	product: string[];
}
/**
 * The possible definitions related to companies.
 */
export declare type CompanyDefinitions = LocaleEntry<{
	/**
	 * Business/products related adjectives.
	 */
	bs_adjective: string[];
	/**
	 * Business/products related nouns.
	 */
	bs_noun: string[];
	/**
	 * Business/products related verbs.
	 */
	bs_verb: string[];
	/**
	 * Catchphrase adjectives.
	 */
	adjective: string[];
	/**
	 * Catchphrase adjectives.
	 */
	descriptor: string[];
	/**
	 * A list of patterns used to generate company names.
	 */
	name_patterns: string[];
	/**
	 * Catchphrase adjectives.
	 */
	noun: string[];
	/**
	 * Company suffixes.
	 */
	suffix: string[];
}>;
/**
 * The possible definitions related to databases.
 */
export declare type DatabaseDefinitions = LocaleEntry<{
	/**
	 * Database engines.
	 */
	engine: string[];
	/**
	 * Database collations.
	 */
	collation: string[];
	/**
	 * Column names.
	 */
	column: string[];
	/**
	 * Column types.
	 */
	type: string[];
}>;
/**
 * The possible definitions related to dates.
 */
export declare type DateDefinitions = LocaleEntry<{
	/**
	 * The translations for months (January - December).
	 */
	month: DateEntryDefinition;
	/**
	 * The translations for weekdays (Sunday - Saturday).
	 */
	weekday: DateEntryDefinition;
}>;
/**
 * The possible definitions related to date entries.
 */
export interface DateEntryDefinition {
	/**
	 * The long name of the entry.
	 */
	wide: string[];
	/**
	 * The short name/abbreviation of the entry.
	 */
	abbr: string[];
	/**
	 * The wide name of the entry when used in context. If absent wide will be used instead.
	 * It is used to specify a word in context, which may differ from a stand-alone word.
	 */
	wide_context?: string[];
	/**
	 * The short name/abbreviation name of the entry when used in context. If absent abbr will be used instead.
	 * It is used to specify a word in context, which may differ from a stand-alone word.
	 */
	abbr_context?: string[];
}
/**
 * The possible definitions related to finance.
 */
export declare type FinanceDefinitions = LocaleEntry<{
	/**
	 * The types of accounts/purposes of an account (e.g. `Savings` account).
	 */
	account_type: string[];
	/**
	 * The pattern by (lowercase) issuer name used to generate credit card codes.
	 * `L` will be replaced by the check bit.
	 *
	 * @see faker.helpers.replaceCreditCardSymbols()
	 */
	credit_card: {
		[issuer: string]: string[];
	};
	/**
	 * Currencies by their full name and their symbols (e.g. `US Dollar` -> `USD` / `$`).
	 */
	currency: {
		[currencyName: string]: FinanceCurrencyEntryDefinitions;
	};
	/**
	 * Types of transactions (e.g. `deposit`).
	 */
	transaction_type: string[];
}>;
/**
 * The possible definitions related to currency entries.
 */
export interface FinanceCurrencyEntryDefinitions {
	/**
	 * The code/short text/abbreviation for the currency (e.g. `USD`).
	 */
	code: string;
	/**
	 * The symbol for the currency (e.g. `$`).
	 */
	symbol: string;
}
/**
 * The possible definitions related to computers.
 */
export declare type HackerDefinitions = LocaleEntry<{
	/**
	 * Generic computer related abbreviations (e.g. `RAM`, `EXE`).
	 */
	abbreviation: string[];
	/**
	 * Some computer related adjectives or descriptors (e.g. `digital`, `bluetooth`)
	 */
	adjective: string[];
	/**
	 * Some computer related verbs for continuous actions (en: `ing` suffix; e.g. `hacking`).
	 */
	ingverb: string[];
	/**
	 * Some computer related nouns (e.g. `protocol`, `sensor`).
	 */
	noun: string[];
	/**
	 * Some phrases that will be injected with random hacker words.
	 * May use any of the HackerDefinition keys wrapped in double braces
	 * (e.g. `I'm {{ingverb}} {{adjective}} {{noun}}`).
	 *
	 * @see faker.helpers.mustache()
	 */
	phrase: string[];
	/**
	 * Some computer related verbs (e.g. `hack`).
	 */
	verb: string[];
}>;
export declare type EmojiType = "smiley" | "body" | "person" | "nature" | "food" | "travel" | "activity" | "object" | "symbol" | "flag";
export declare type HTTPStatusCodeType = "informational" | "success" | "clientError" | "serverError" | "redirection";
/**
 * Module to generate internet related entries.
 */
export declare class InternetModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random avatar url.
	 *
	 * @example
	 * faker.internet.avatar()
	 * // 'https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/315.jpg'
	 *
	 * @since 2.0.1
	 */
	avatar(): string;
	/**
	 * Generates an email address using the given person's name as base.
	 *
	 * @param firstName The optional first name to use. If not specified, a random one will be chosen.
	 * @param lastName The optional last name to use. If not specified, a random one will be chosen.
	 * @param provider The mail provider domain to use. If not specified, a random free mail provider will be chosen.
	 * @param options The options to use. Defaults to `{ allowSpecialCharacters: false }`.
	 * @param options.allowSpecialCharacters Whether special characters such as ``.!#$%&'*+-/=?^_`{|}~`` should be included
	 * in the email address. Defaults to `false`.
	 *
	 * @example
	 * faker.internet.email() // 'Kassandra4@hotmail.com'
	 * faker.internet.email('Jeanne', 'Doe') // 'Jeanne63@yahoo.com'
	 * faker.internet.email('Jeanne', 'Doe', 'example.fakerjs.dev') // 'Jeanne_Doe88@example.fakerjs.dev'
	 * faker.internet.email('Jeanne', 'Doe', 'example.fakerjs.dev', { allowSpecialCharacters: true }) // 'Jeanne%Doe88@example.fakerjs.dev'
	 *
	 * @since 2.0.1
	 */
	email(firstName?: string, lastName?: string, provider?: string, options?: {
		allowSpecialCharacters?: boolean;
	}): string;
	/**
	 * Generates an email address using an example mail provider using the given person's name as base.
	 *
	 * @param firstName The optional first name to use. If not specified, a random one will be chosen.
	 * @param lastName The optional last name to use. If not specified, a random one will be chosen.
	 * @param options The options to use. Defaults to `{ allowSpecialCharacters: false }`.
	 * @param options.allowSpecialCharacters Whether special characters such as ``.!#$%&'*+-/=?^_`{|}~`` should be included
	 * in the email address. Defaults to `false`.
	 *
	 * @example
	 * faker.internet.exampleEmail() // 'Helmer.Graham23@example.com'
	 * faker.internet.exampleEmail('Jeanne', 'Doe') // 'Jeanne96@example.net'
	 * faker.internet.exampleEmail('Jeanne', 'Doe', { allowSpecialCharacters: true }) // 'Jeanne%Doe88@example.com'
	 *
	 * @since 3.1.0
	 */
	exampleEmail(firstName?: string, lastName?: string, options?: {
		allowSpecialCharacters?: boolean;
	}): string;
	/**
	 * Generates a username using the given person's name as base.
	 *
	 * @param firstName The optional first name to use. If not specified, a random one will be chosen.
	 * @param lastName The optional last name to use. If not specified, a random one will be chosen.
	 *
	 * @example
	 * faker.internet.userName() // 'Nettie_Zboncak40'
	 * faker.internet.userName('Jeanne', 'Doe') // 'Jeanne98'
	 *
	 * @since 2.0.1
	 */
	userName(firstName?: string, lastName?: string): string;
	/**
	 * Returns a random web protocol. Either `http` or `https`.
	 *
	 * @example
	 * faker.internet.protocol() // 'http'
	 * faker.internet.protocol() // 'https'
	 *
	 * @since 2.1.5
	 */
	protocol(): "http" | "https";
	/**
	 * Returns a random http method.
	 *
	 * Can be either of the following:
	 *
	 * - `GET`
	 * - `POST`
	 * - `PUT`
	 * - `DELETE`
	 * - `PATCH`
	 *
	 * @example
	 * faker.internet.httpMethod() // 'PATCH'
	 *
	 * @since 5.4.0
	 */
	httpMethod(): "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
	/**
	 * Generates a random HTTP status code.
	 *
	 * @param options Options object.
	 * @param options.types A list of the HTTP status code types that should be used.
	 *
	 * @example
	 * faker.internet.httpStatusCode() // 200
	 * faker.internet.httpStatusCode({ types: ['success', 'serverError'] }) // 500
	 *
	 * @since 7.0.0
	 */
	httpStatusCode(options?: {
		types?: ReadonlyArray<HTTPStatusCodeType>;
	}): number;
	/**
	 * Generates a random url.
	 *
	 * @example
	 * faker.internet.url() // 'https://remarkable-hackwork.info'
	 *
	 * @since 2.1.5
	 */
	url(): string;
	/**
	 * Generates a random domain name.
	 *
	 * @example
	 * faker.internet.domainName() // 'slow-timer.info'
	 *
	 * @since 2.0.1
	 */
	domainName(): string;
	/**
	 * Returns a random domain suffix.
	 *
	 * @example
	 * faker.internet.domainSuffix() // 'com'
	 * faker.internet.domainSuffix() // 'name'
	 *
	 * @since 2.0.1
	 */
	domainSuffix(): string;
	/**
	 * Generates a random domain word.
	 *
	 * @example
	 * faker.internet.domainWord() // 'close-reality'
	 * faker.internet.domainWord() // 'weird-cytoplasm'
	 *
	 * @since 2.0.1
	 */
	domainWord(): string;
	/**
	 * Generates a random IPv4 address.
	 *
	 * @example
	 * faker.internet.ip() // '245.108.222.0'
	 *
	 * @since 2.0.1
	 */
	ip(): string;
	/**
	 * Generates a random IPv4 address.
	 *
	 * @example
	 * faker.internet.ipv4() // '245.108.222.0'
	 *
	 * @since 6.1.1
	 */
	ipv4(): string;
	/**
	 * Generates a random IPv6 address.
	 *
	 * @example
	 * faker.internet.ipv6() // '269f:1230:73e3:318d:842b:daab:326d:897b'
	 *
	 * @since 4.0.0
	 */
	ipv6(): string;
	/**
	 * Generates a random port number.
	 *
	 * @example
	 * faker.internet.port() // '9414'
	 *
	 * @since 5.4.0
	 */
	port(): number;
	/**
	 * Generates a random user agent string.
	 *
	 * @example
	 * faker.internet.userAgent()
	 * // 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_8_8)  AppleWebKit/536.0.2 (KHTML, like Gecko) Chrome/27.0.849.0 Safari/536.0.2'
	 *
	 * @since 2.0.1
	 */
	userAgent(): string;
	/**
	 * Generates a random css hex color code in aesthetically pleasing color palette.
	 *
	 * Based on
	 * http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
	 *
	 * @param redBase The optional base red in range between `0` and `255`. Defaults to `0`.
	 * @param greenBase The optional base green in range between `0` and `255`. Defaults to `0`.
	 * @param blueBase The optional base blue in range between `0` and `255`. Defaults to `0`.
	 *
	 * @example
	 * faker.internet.color() // '#30686e'
	 * faker.internet.color(100, 100, 100) // '#4e5f8b'
	 *
	 * @since 2.0.1
	 */
	color(redBase?: number, greenBase?: number, blueBase?: number): string;
	/**
	 * Generates a random mac address.
	 *
	 * @param sep The optional separator to use. Can be either `':'`, `'-'` or `''`. Defaults to `':'`.
	 *
	 * @example
	 * faker.internet.mac() // '32:8e:2e:09:c6:05'
	 *
	 * @since 3.0.0
	 */
	mac(sep?: string): string;
	/**
	 * Generates a random password.
	 *
	 * @param len The length of the password to generate. Defaults to `15`.
	 * @param memorable Whether the generated password should be memorable. Defaults to `false`.
	 * @param pattern The pattern that all chars should match should match.
	 * This option will be ignored, if `memorable` is `true`. Defaults to `/\w/`.
	 * @param prefix The prefix to use. Defaults to `''`.
	 *
	 * @example
	 * faker.internet.password() // '89G1wJuBLbGziIs'
	 * faker.internet.password(20) // 'aF55c_8O9kZaPOrysFB_'
	 * faker.internet.password(20, true) // 'lawetimufozujosodedi'
	 * faker.internet.password(20, true, /[A-Z]/) // 'HMAQDFFYLDDUTBKVNFVS'
	 * faker.internet.password(20, true, /[A-Z]/, 'Hello ') // 'Hello IREOXTDWPERQSB'
	 *
	 * @since 2.0.1
	 */
	password(len?: number, memorable?: boolean, pattern?: RegExp, prefix?: string): string;
	/**
	 * Generates a random emoji.
	 *
	 * @param options Options object.
	 * @param options.types A list of the emoji types that should be used.
	 *
	 * @example
	 * faker.internet.emoji() // '🥰'
	 * faker.internet.emoji({ types: ['food', 'nature'] }) // '🥐'
	 *
	 * @since 6.2.0
	 */
	emoji(options?: {
		types?: ReadonlyArray<EmojiType>;
	}): string;
}
/**
 * The possible definitions related to internet stuff.
 */
export declare type InternetDefinitions = LocaleEntry<{
	/**
	 * Common top level and similar domains (e.g `de`, `co.uk`).
	 */
	domain_suffix: string[];
	/**
	 * Some email domains containing `example` (e.g. `example.com`).
	 */
	example_email: string[];
	/**
	 * Some free-mail domains used in that country (e.g. `gmail.de`).
	 */
	free_email: string[];
	/**
	 * List of all fully-qualified emojis.
	 */
	emoji: Record<EmojiType, string[]>;
	/**
	 * List of some HTTP status codes.
	 */
	http_status_code: Record<HTTPStatusCodeType, number[]>;
}>;
/**
 * The possible definitions related to lorem texts.
 */
export declare type LoremDefinitions = LocaleEntry<{
	/**
	 * Lorem words used to generate dummy texts.
	 */
	words: string[];
}>;
/**
 * The possible definitions related to music.
 */
export declare type MusicDefinitions = LocaleEntry<{
	/**
	 * The names of some music genres.
	 */
	genre: string[];
	/**
	 * The names of some songs.
	 */
	song_name: string[];
}>;
/**
 * The possible definitions related to people's names.
 */
export declare type NameDefinitions = LocaleEntry<{
	gender: string[];
	sex: string[];
	prefix?: string[];
	female_prefix?: string[];
	male_prefix?: string[];
	first_name?: string[];
	female_first_name?: string[];
	male_first_name?: string[];
	middle_name?: string[];
	female_middle_name?: string[];
	male_middle_name?: string[];
	last_name?: string[];
	female_last_name?: string[];
	male_last_name?: string[];
	suffix: string[];
	/**
	 * A list of patterns used to generate names.
	 */
	name: string[];
	title: NameTitleDefinitions;
}>;
/**
 * The possible definitions related to people's titles.
 */
export interface NameTitleDefinitions {
	descriptor?: string[];
	job: string[];
	level?: string[];
}
/**
 * The possible definitions related to phone numbers.
 */
export declare type PhoneNumberDefinitions = LocaleEntry<{
	/**
	 * Some patterns used to generate phone numbers.
	 * `#` will be replaced by a random digit (0-9).
	 * `!` will be replaced by a random digit (2-9).
	 * (e.g. `!##-!##-####` -> 272-285-0453)
	 *
	 * @see faker.helpers.replaceSymbolWithNumber(format)
	 */
	formats: string[];
}>;
/**
 * The possible definitions related to elements.
 */
export interface ChemicalElement {
	/**
	 * The symbol for the element (e.g. `'He'`).
	 */
	symbol: string;
	/**
	 * The name for the element (e.g. `'Cerium'`).
	 */
	name: string;
	/**
	 * The atomic number for the element (e.g. `52`).
	 */
	atomicNumber: number;
}
export interface Unit {
	/**
	 * The long version of the unit (e.g. `meter`).
	 */
	name: string;
	/**
	 * The short version/abbreviation of the element (e.g. `Pa`).
	 */
	symbol: string;
}
/**
 * Module to generate science related entries.
 */
export declare class ScienceModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random periodic table element.
	 *
	 * @example
	 * faker.science.chemicalElement() // { symbol: 'H', name: 'Hydrogen', atomicNumber: 1 }
	 * faker.science.chemicalElement() // { symbol: 'Xe', name: 'Xenon', atomicNumber: 54 }
	 * faker.science.chemicalElement() // { symbol: 'Ce', name: 'Cerium', atomicNumber: 58 }
	 *
	 * @since 7.2.0
	 */
	chemicalElement(): ChemicalElement;
	/**
	 * Returns a random scientific unit.
	 *
	 * @example
	 * faker.science.unit() // { name: 'meter', symbol: 'm' }
	 * faker.science.unit() // { name: 'second', symbol: 's' }
	 * faker.science.unit() // { name: 'mole', symbol: 'mol' }
	 *
	 * @since 7.2.0
	 */
	unit(): Unit;
}
/**
 * The possible definitions related to science.
 */
export declare type ScienceDefinitions = LocaleEntry<{
	/**
	 * Some science units.
	 */
	unit: readonly Unit[];
	/**
	 * Some periodic table element information.
	 */
	chemicalElement: readonly ChemicalElement[];
}>;
/**
 * The possible definitions related to files and operating systems.
 */
export declare type SystemDefinitions = LocaleEntry<{
	/**
	 * Returns some common file paths.
	 */
	directoryPaths: string[];
	/**
	 * The mime type definitions with some additional information.
	 */
	mimeTypes: {
		[mimeType: string]: SystemMimeTypeEntryDefinitions;
	};
}>;
/**
 * The mime-type entry details.
 */
export interface SystemMimeTypeEntryDefinitions {
	source?: string;
	extensions?: string[];
	compressible?: boolean;
	charset?: string;
}
/**
 * The possible definitions related to vehicles.
 */
export declare type VehicleDefinitions = LocaleEntry<{
	/**
	 * Some types of bicycles.
	 */
	bicycle_type: string[];
	/**
	 * Some types of fuel (e.g. `Gasoline`).
	 */
	fuel: string[];
	/**
	 * Some brands of manufactures (e.g. `Tesla`).
	 */
	manufacturer: string[];
	/**
	 * Some names of models (e.g. `Fiesta`).
	 */
	model: string[];
	/**
	 * Some types of vehicles (e.g. `Minivan`).
	 */
	type: string[];
}>;
/**
 * The possible definitions related to words.
 */
export declare type WordDefinitions = LocaleEntry<{
	adjective: string[];
	adverb: string[];
	conjunction: string[];
	interjection: string[];
	noun: string[];
	preposition: string[];
	verb: string[];
}>;
export declare type LocaleEntry<T> = Partial<T> & Record<string, any>;
/**
 * The definitions as used by the Faker modules.
 */
export interface Definitions {
	address: AddressDefinitions;
	animal: AnimalDefinitions;
	color: ColorDefinitions;
	commerce: CommerceDefinitions;
	company: CompanyDefinitions;
	database: DatabaseDefinitions;
	date: DateDefinitions;
	finance: FinanceDefinitions;
	hacker: HackerDefinitions;
	internet: InternetDefinitions;
	lorem: LoremDefinitions;
	music: MusicDefinitions;
	name: NameDefinitions;
	phone_number: PhoneNumberDefinitions;
	science: ScienceDefinitions;
	system: SystemDefinitions;
	vehicle: VehicleDefinitions;
	word: WordDefinitions;
}
/**
 * The definitions as used by the translations/locales.
 * This is basically the same as Definitions with the exception,
 * that most properties are optional and extra properties are allowed.
 */
export declare type LocaleDefinition = {
	/**
	 * The name of the language.
	 */
	title: string;
	separator?: string;
} & LocaleEntry<Definitions>;
/**
 * The possible definitions related to addresses.
 */
export declare type AddressDefinitions = LocaleEntry<{
	/**
	 * Postcodes patterns by state
	 */
	postcode_by_state: {
		[state: string]: {
			min: number;
			max: number;
		};
	};
	/**
	 * Postcodes patterns.
	 */
	postcode: string | string[];
	/**
	 * The patterns to generate city names.
	 */
	city: string[];
	/**
	 * The names of actual cities.
	 */
	city_name: string[];
	/**
	 * Common city prefixes.
	 */
	city_prefix: string[];
	/**
	 * Common city suffixes.
	 */
	city_suffix: string[];
	/**
	 * The names of all countries.
	 */
	country: string[];
	/**
	 * The names of this country's states.
	 */
	state: string[];
	/**
	 * The abbreviated names of this country's states.
	 */
	state_abbr: string[];
	/**
	 * The names of counties inside the country or state.
	 */
	county: string[];
	/**
	 * The names of the compass directions.
	 * First the 4 cardinal directions, then the 4 ordinal directions.
	 */
	direction: string[];
	/**
	 * The abbreviated names of the compass directions.
	 * First the 4 cardinal directions, then the 4 ordinal directions.
	 */
	direction_abbr: string[];
	/**
	 * The pattern used to generate building numbers.
	 */
	building_number: string[];
	/**
	 * The patterns to generate street names.
	 */
	street: string[];
	/**
	 * The names of actual streets.
	 */
	street_name: string[];
	/**
	 * Common street prefixes.
	 */
	street_prefix: string[];
	/**
	 * Common street suffixes.
	 */
	street_suffix: string[];
	/**
	 * The pattern used to generate street addresses.
	 */
	street_address: {
		/**
		 * The fake pattern to generate only the street address.
		 */
		normal: string;
		/**
		 * The fake pattern to generate the full street address including the secondary address.
		 */
		full: string;
	};
	/**
	 * The address "inside" an address/e.g. an apartment or office.
	 */
	secondary_address: string[];
	/**
	 * The ISO-3166-1 ALPHA-2 country codes related to this locale.
	 */
	country_code: string[];
	/**
	 * The ISO-3166-1 ALPHA-3 country codes related to this locale.
	 */
	country_code_alpha_3: string[];
	/**
	 * A list of timezones names.
	 */
	time_zone: string[];
}>;
export declare type KnownLocale = "af_ZA" | "ar" | "az" | "cz" | "de" | "de_AT" | "de_CH" | "el" | "en" | "en_AU" | "en_AU_ocker" | "en_BORK" | "en_CA" | "en_GB" | "en_GH" | "en_IE" | "en_IND" | "en_NG" | "en_US" | "en_ZA" | "es" | "es_MX" | "fa" | "fi" | "fr" | "fr_BE" | "fr_CA" | "fr_CH" | "ge" | "he" | "hr" | "hu" | "hy" | "id_ID" | "it" | "ja" | "ko" | "lv" | "mk" | "nb_NO" | "ne" | "nl" | "nl_BE" | "pl" | "pt_BR" | "pt_PT" | "ro" | "ru" | "sk" | "sv" | "tr" | "uk" | "ur" | "vi" | "zh_CN" | "zh_TW" | "zu_ZA";
/**
 * Module to generate addresses and locations.
 */
export declare class AddressModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates random zip code from specified format. If format is not specified,
	 * the locale's zip format is used.
	 *
	 * @param format The optional format used to generate the the zip code.
	 * By default, a random format is used from the locale zip formats.
	 *
	 * @see faker.helpers.replaceSymbols()
	 *
	 * @example
	 * faker.address.zipCode() // '17839'
	 * faker.address.zipCode('####') // '6925'
	 *
	 * @since 2.0.1
	 */
	zipCode(format?: string): string;
	/**
	 * Generates random zip code from state abbreviation. If state abbreviation is
	 * not specified, a random zip code is generated according to the locale's zip format.
	 * Only works for locales with postcode_by_state definition. If a locale does not
	 * have a postcode_by_state definition, a random zip code is generated according
	 * to the locale's zip format.
	 *
	 * @param state The abbreviation of the state to generate the zip code for.
	 *
	 * @example
	 * fakerUS.address.zipCodeByState("AK") // '99595'
	 * fakerUS.address.zipCodeByState("??") // '47683-9880'
	 *
	 * @since 5.0.0
	 */
	zipCodeByState(state: string): string;
	/**
	 * Generates a random localized city name.
	 *
	 * @param format The index of the format to use. Deprecated do not use.
	 *
	 * @example
	 * faker.address.city() // 'East Jarretmouth'
	 *
	 * @since 2.0.1
	 */
	city(format?: string | number): string;
	/**
	 * Returns a random localized city prefix.
	 *
	 * @see faker.address.city()
	 *
	 * @example
	 * faker.address.cityPrefix() // 'East'
	 *
	 * @since 2.0.1
	 *
	 * @deprecated
	 * Use `faker.address.city()` instead.
	 */
	cityPrefix(): string;
	/**
	 * Returns a random localized city suffix.
	 *
	 * @see faker.address.city()
	 *
	 * @example
	 * faker.address.citySuffix() // 'mouth'
	 *
	 * @since 2.0.1
	 *
	 * @deprecated
	 * Use `faker.address.city()` instead.
	 */
	citySuffix(): string;
	/**
	 * Returns a random localized and existing city name.
	 *
	 * @example
	 * faker.address.cityName() // 'San Rafael'
	 *
	 * @since 5.5.0
	 */
	cityName(): string;
	/**
	 * Generates a random building number.
	 *
	 * @example
	 * faker.address.buildingNumber() // '379'
	 *
	 * @since 6.2.0
	 */
	buildingNumber(): string;
	/**
	 * Generates a random localized street name.
	 *
	 * @example
	 * faker.address.street() // 'Schroeder Isle'
	 *
	 * @since 7.0.0
	 */
	street(): string;
	/**
	 * Returns a random localized street name.
	 *
	 * @example
	 * fakerDE.address.streetName() // 'Cavill Avenue'
	 *
	 * @since 2.0.1
	 */
	streetName(): string;
	/**
	 * Generates a random localized street address.
	 *
	 * @param useFullAddress When true this will generate a full address.
	 * Otherwise it will just generate a street address.
	 *
	 * @example
	 * faker.address.streetAddress() // '0917 O'Conner Estates'
	 * faker.address.streetAddress(false) // '34830 Erdman Hollow'
	 * faker.address.streetAddress(true) // '3393 Ronny Way Apt. 742'
	 *
	 * @since 2.0.1
	 */
	streetAddress(useFullAddress?: boolean): string;
	/**
	 * Returns a random localized street suffix.
	 *
	 * @see faker.address.street()
	 *
	 * @example
	 * faker.address.streetSuffix() // 'Streets'
	 *
	 * @since 2.0.1
	 *
	 * @deprecated Use faker.address.street() instead.
	 */
	streetSuffix(): string;
	/**
	 * Returns a random localized street prefix.
	 *
	 * @see faker.address.street()
	 *
	 * @example
	 * fakerGH.address.streetPrefix() // 'Boame'
	 *
	 * @since 3.0.0
	 *
	 * @deprecated Use faker.address.street() instead.
	 */
	streetPrefix(): string;
	/**
	 * Generates a random localized secondary address. This refers to a specific location at a given address
	 * such as an apartment or room number.
	 *
	 * @example
	 * faker.address.secondaryAddress() // 'Apt. 861'
	 *
	 * @since 2.0.1
	 */
	secondaryAddress(): string;
	/**
	 * Returns a random localized county.
	 *
	 * @example
	 * faker.address.county() // 'Cambridgeshire'
	 *
	 * @since 2.0.1
	 */
	county(): string;
	/**
	 * Returns a random country name.
	 *
	 * @example
	 * faker.address.country() // 'Greece'
	 *
	 * @since 2.0.1
	 */
	country(): string;
	/**
	 * Returns a random country code.
	 *
	 * @param alphaCode The code to return. Can be either `'alpha-2'` (2 letter code)
	 * or `'alpha-3'` (three letter code). Defaults to `'alpha-2'`.
	 *
	 * @example
	 * faker.address.countryCode() // 'SJ'
	 * faker.address.countryCode('alpha-2') // 'GA'
	 * faker.address.countryCode('alpha-3') // 'TJK'
	 *
	 * @since 3.0.0
	 */
	countryCode(alphaCode?: "alpha-2" | "alpha-3"): string;
	/**
	 * Returns a random localized state from this country.
	 *
	 * @example
	 * faker.address.state() // 'Georgia'
	 *
	 * @since 2.0.1
	 */
	state(): string;
	/**
	 * Returns a random localized state's abbreviated name from this country.
	 *
	 * @example
	 * faker.address.stateAbbr() // 'ND'
	 *
	 * @since 2.0.1
	 */
	stateAbbr(): string;
	/**
	 * Generates a random latitude.
	 *
	 * @param max The upper bound for the latitude to generate. Defaults to `90`.
	 * @param min The lower bound for the latitude to generate. Defaults to `-90`.
	 * @param precision The number of decimal points of precision for the latitude. Defaults to `4`.
	 *
	 * @example
	 * faker.address.latitude() // '-30.9501'
	 * faker.address.latitude(10, -10, 5) // '2.68452'
	 *
	 * @since 2.0.1
	 */
	latitude(max?: number, min?: number, precision?: number): string;
	/**
	 * Generates a random longitude.
	 *
	 * @param max The upper bound for the longitude to generate. Defaults to `180`.
	 * @param min The lower bound for the longitude to generate. Defaults to `-180`.
	 * @param precision The number of decimal points of precision for the longitude. Defaults to `4`.
	 *
	 * @example
	 * faker.address.longitude() // '-154.0226'
	 * faker.address.longitude(10, -10, 5) // '-4.03620'
	 *
	 * @since 2.0.1
	 */
	longitude(max?: number, min?: number, precision?: number): string;
	/**
	 * Returns a random direction (cardinal and ordinal; northwest, east, etc).
	 *
	 * @param useAbbr If true this will return abbreviated directions (NW, E, etc).
	 * Otherwise this will return the long name. Defaults to `false`.
	 *
	 * @example
	 * faker.address.direction() // 'Northeast'
	 * faker.address.direction(false) // 'South'
	 * faker.address.direction(true) // 'NE'
	 *
	 * @since 5.0.0
	 */
	direction(useAbbr?: boolean): string;
	/**
	 * Returns a random cardinal direction (north, east, south, west).
	 *
	 * @param useAbbr If true this will return abbreviated directions (N, E, etc).
	 * Otherwise this will return the long name. Defaults to `false`.
	 *
	 * @example
	 * faker.address.cardinalDirection() // 'North'
	 * faker.address.cardinalDirection(false) // 'South'
	 * faker.address.cardinalDirection(true) // 'N'
	 *
	 * @since 5.0.0
	 */
	cardinalDirection(useAbbr?: boolean): string;
	/**
	 * Returns a random ordinal direction (northwest, southeast, etc).
	 *
	 * @param useAbbr If true this will return abbreviated directions (NW, SE, etc).
	 * Otherwise this will return the long name. Defaults to `false`.
	 *
	 * @example
	 * faker.address.ordinalDirection() // 'Northeast'
	 * faker.address.ordinalDirection(false) // 'Northwest'
	 * faker.address.ordinalDirection(true) // 'NE'
	 *
	 * @since 5.0.0
	 */
	ordinalDirection(useAbbr?: boolean): string;
	/**
	 * Generates a random GPS coordinate within the specified radius from the given coordinate.
	 *
	 * @param coordinate The original coordinate to get a new coordinate close to.
	 * If no coordinate is given, a random one will be chosen.
	 * @param radius The maximum distance from the given coordinate to the new coordinate. Defaults to `10`.
	 * @param isMetric If `true` assume the radius to be in kilometers. If `false` for miles. Defaults to `false`.
	 *
	 * @example
	 * faker.address.nearbyGPSCoordinate() // [ '33.8475', '-170.5953' ]
	 * faker.address.nearbyGPSCoordinate([33, -170]) // [ '33.0165', '-170.0636' ]
	 * faker.address.nearbyGPSCoordinate([33, -170], 1000, true) // [ '37.9163', '-179.2408' ]
	 *
	 * @since 5.0.0
	 */
	nearbyGPSCoordinate(coordinate?: [
		latitude: number,
		longitude: number
	], radius?: number, isMetric?: boolean): [
		latitude: string,
		longitude: string
	];
	/**
	 * Returns a random time zone.
	 *
	 * @example
	 * faker.address.timeZone() // 'Pacific/Guam'
	 *
	 * @since 5.1.0
	 */
	timeZone(): string;
}
/**
 * Module to generate animal related entries.
 */
export declare class AnimalModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random dog breed.
	 *
	 * @example
	 * faker.animal.dog() // 'Irish Water Spaniel'
	 *
	 * @since 5.5.0
	 */
	dog(): string;
	/**
	 * Returns a random cat breed.
	 *
	 * @example
	 * faker.animal.cat() // 'Singapura'
	 *
	 * @since 5.5.0
	 */
	cat(): string;
	/**
	 * Returns a random snake species.
	 *
	 * @example
	 * faker.animal.snake() // 'Eyelash viper'
	 *
	 * @since 5.5.0
	 */
	snake(): string;
	/**
	 * Returns a random bear species.
	 *
	 * @example
	 * faker.animal.bear() // 'Asian black bear'
	 *
	 * @since 5.5.0
	 */
	bear(): string;
	/**
	 * Returns a random lion species.
	 *
	 * @example
	 * faker.animal.lion() // 'Northeast Congo Lion'
	 *
	 * @since 5.5.0
	 */
	lion(): string;
	/**
	 * Returns a random cetacean species.
	 *
	 * @example
	 * faker.animal.cetacean() // 'Spinner Dolphin'
	 *
	 * @since 5.5.0
	 */
	cetacean(): string;
	/**
	 * Returns a random horse breed.
	 *
	 * @example
	 * faker.animal.horse() // 'Swedish Warmblood'
	 *
	 * @since 5.5.0
	 */
	horse(): string;
	/**
	 * Returns a random bird species.
	 *
	 * @example
	 * faker.animal.bird() // 'Buller's Shearwater'
	 *
	 * @since 5.5.0
	 */
	bird(): string;
	/**
	 * Returns a random cow species.
	 *
	 * @example
	 * faker.animal.cow() // 'Brava'
	 *
	 * @since 5.5.0
	 */
	cow(): string;
	/**
	 * Returns a random fish species.
	 *
	 * @example
	 * faker.animal.fish() // 'Mandarin fish'
	 *
	 * @since 5.5.0
	 */
	fish(): string;
	/**
	 * Returns a random crocodilian species.
	 *
	 * @example
	 * faker.animal.crocodilia() // 'Philippine Crocodile'
	 *
	 * @since 5.5.0
	 */
	crocodilia(): string;
	/**
	 * Returns a random insect species.
	 *
	 * @example
	 * faker.animal.insect() // 'Pyramid ant'
	 *
	 * @since 5.5.0
	 */
	insect(): string;
	/**
	 * Returns a random rabbit species.
	 *
	 * @example
	 * faker.animal.rabbit() // 'Florida White'
	 *
	 * @since 5.5.0
	 */
	rabbit(): string;
	/**
	 * Returns a random rodent breed.
	 *
	 * @example
	 * faker.animal.rodent() // 'Cuscomys ashanika'
	 *
	 * @since 7.4.0
	 */
	rodent(): string;
	/**
	 * Returns a random animal type.
	 *
	 * @example
	 * faker.animal.type() // 'crocodilia'
	 *
	 * @since 5.5.0
	 */
	type(): string;
}
declare const CSS_SPACES: readonly [
	"sRGB",
	"display-p3",
	"rec2020",
	"a98-rgb",
	"prophoto-rgb",
	"rec2020"
];
declare const CSS_FUNCTIONS: readonly [
	"rgb",
	"rgba",
	"hsl",
	"hsla",
	"hwb",
	"cmyk",
	"lab",
	"lch",
	"color"
];
export declare type CSSFunction = typeof CSS_FUNCTIONS[number];
export declare type CSSSpace = typeof CSS_SPACES[number];
export declare type StringColorFormat = "css" | "binary";
export declare type NumberColorFormat = "decimal";
export declare type ColorFormat = StringColorFormat | NumberColorFormat;
export declare type Casing = "lower" | "upper" | "mixed";
/**
 * Module to generate colors.
 */
export declare class ColorModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random human readable color name.
	 *
	 * @example
	 * faker.color.human() // 'red'
	 *
	 * @since 7.0.0
	 */
	human(): string;
	/**
	 * Returns a random color space name from the worldwide accepted color spaces.
	 * Source: https://en.wikipedia.org/wiki/List_of_color_spaces_and_their_uses
	 *
	 * @example
	 * faker.color.space() // 'sRGB'
	 *
	 * @since 7.0.0
	 */
	space(): string;
	/**
	 * Returns a random css supported color function name.
	 *
	 * @example
	 * faker.color.cssSupportedFunction() // 'rgb'
	 *
	 * @since 7.0.0
	 */
	cssSupportedFunction(): string;
	/**
	 * Returns a random css supported color space name.
	 *
	 * @example
	 * faker.color.cssSupportedSpace() // 'display-p3'
	 *
	 * @since 7.0.0
	 */
	cssSupportedSpace(): string;
	/**
	 * Returns an RGB color.
	 *
	 * @example
	 * faker.color.rgb() // '0xffffFF'
	 *
	 * @since 7.0.0
	 */
	rgb(): string;
	/**
	 * Returns an RGB color.
	 *
	 * @param options Options object.
	 * @param options.prefix Prefix of the generated hex color. Only applied when 'hex' format is used. Defaults to `'0x'`.
	 * @param options.casing Letter type case of the generated hex color. Only applied when `'hex'` format is used. Defaults to `'mixed'`.
	 * @param options.format Format of generated RGB color. Defaults to `hex`.
	 * @param options.includeAlpha Adds an alpha value to the color (RGBA). Defaults to `false`.
	 *
	 * @example
	 * faker.color.rgb() // '0xffffFF'
	 * faker.color.rgb({ prefix: '#' }) // '#ffffFF'
	 * faker.color.rgb({ casing: 'upper' }) // '0xFFFFFF'
	 * faker.color.rgb({ casing: 'lower' }) // '0xffffff'
	 * faker.color.rgb({ prefix: '#', casing: 'lower' }) // '#ffffff'
	 * faker.color.rgb({ format: 'hex', casing: 'lower' }) // '#ffffff'
	 * faker.color.rgb({ format: 'css' }) // 'rgb(255, 0, 0)'
	 * faker.color.rgb({ format: 'binary' }) // '10000000 00000000 11111111'
	 *
	 * @since 7.0.0
	 */
	rgb(options?: {
		prefix?: string;
		casing?: Casing;
		format?: "hex" | StringColorFormat;
		includeAlpha?: boolean;
	}): string;
	/**
	 * Returns an RGB color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'hex'`.
	 * @param options.includeAlpha Adds an alpha value to the color (RGBA). Defaults to `false`.
	 *
	 * @example
	 * faker.color.rgb() // '0xffffFF'
	 * faker.color.rgb({ format: 'decimal' }) // [255, 255, 255]
	 * faker.color.rgb({ format: 'decimal', includeAlpha: true }) // [255, 255, 255, 0.4]
	 *
	 * @since 7.0.0
	 */
	rgb(options?: {
		format?: NumberColorFormat;
		includeAlpha?: boolean;
	}): number[];
	/**
	 * Returns an RGB color.
	 *
	 * @param options Options object.
	 * @param options.prefix Prefix of the generated hex color. Only applied when `'hex'` format is used. Defaults to `'0x'`.
	 * @param options.casing Letter type case of the generated hex color. Only applied when `'hex'` format is used. Defaults to `'mixed'`.
	 * @param options.format Format of generated RGB color. Defaults to `'hex'`.
	 * @param options.includeAlpha Adds an alpha value to the color (RGBA). Defaults to `false`.
	 *
	 * @example
	 * faker.color.rgb() // '0xffffFF'
	 * faker.color.rgb({ prefix: '#' }) // '#ffffFF'
	 * faker.color.rgb({ casing: 'upper' }) // '0xFFFFFF'
	 * faker.color.rgb({ casing: 'lower' }) // '0xffffff'
	 * faker.color.rgb({ prefix: '#', casing: 'lower' }) // '#ffffff'
	 * faker.color.rgb({ format: 'hex', casing: 'lower' }) // '#ffffff'
	 * faker.color.rgb({ format: 'decimal' }) // [255, 255, 255]
	 * faker.color.rgb({ format: 'css' }) // 'rgb(255, 0, 0)'
	 * faker.color.rgb({ format: 'binary' }) // '10000000 00000000 11111111'
	 * faker.color.rgb({ format: 'decimal', includeAlpha: true }) // [255, 255, 255, 0.4]
	 *
	 * @since 7.0.0
	 */
	rgb(options?: {
		prefix?: string;
		casing?: Casing;
		format?: "hex" | ColorFormat;
		includeAlpha?: boolean;
	}): string | number[];
	/**
	 * Returns a CMYK color.
	 *
	 * @example
	 * faker.color.cmyk() // [0.31, 0.52, 0.32, 0.43]
	 *
	 * @since 7.0.0
	 */
	cmyk(): number[];
	/**
	 * Returns a CMYK color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated CMYK color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.cmyk() // [0.31, 0.52, 0.32, 0.43]
	 * faker.color.cmyk({ format: 'css' }) // cmyk(100%, 0%, 0%, 0%)
	 * faker.color.cmyk({ format: 'binary' }) // (8-32 bits) x 4
	 *
	 * @since 7.0.0
	 */
	cmyk(options?: {
		format?: StringColorFormat;
	}): string;
	/**
	 * Returns a CMYK color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated CMYK color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.cmyk() // [0.31, 0.52, 0.32, 0.43]
	 * faker.color.cmyk({ format: 'decimal' }) // [0.31, 0.52, 0.32, 0.43]
	 *
	 * @since 7.0.0
	 */
	cmyk(options?: {
		format?: NumberColorFormat;
	}): number[];
	/**
	 * Returns a CMYK color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated CMYK color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.cmyk() // [0.31, 0.52, 0.32, 0.43]
	 * faker.color.cmyk({ format: 'decimal' }) // [0.31, 0.52, 0.32, 0.43]
	 * faker.color.cmyk({ format: 'css' }) // cmyk(100%, 0%, 0%, 0%)
	 * faker.color.cmyk({ format: 'binary' }) // (8-32 bits) x 4
	 *
	 * @since 7.0.0
	 */
	cmyk(options?: {
		format?: ColorFormat;
	}): string | number[];
	/**
	 * Returns an HSL color.
	 *
	 * @example
	 * faker.color.hsl() // [201, 0.23, 0.32]
	 *
	 * @since 7.0.0
	 */
	hsl(): number[];
	/**
	 * Returns an HSL color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated HSL color. Defaults to `'decimal'`.
	 * @param options.includeAlpha Adds an alpha value to the color (RGBA). Defaults to `false`.
	 *
	 * @example
	 * faker.color.hsl() // [201, 0.23, 0.32]
	 * faker.color.hsl({ format: 'css' }) // hsl(0deg, 100%, 80%)
	 * faker.color.hsl({ format: 'css', includeAlpha: true }) // hsl(0deg 100% 50% / 0.5)
	 * faker.color.hsl({ format: 'binary' }) // (8-32 bits) x 3
	 * faker.color.hsl({ format: 'binary', includeAlpha: true }) // (8-32 bits) x 4
	 *
	 * @since 7.0.0
	 */
	hsl(options?: {
		format?: StringColorFormat;
		includeAlpha?: boolean;
	}): string;
	/**
	 * Returns an HSL color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated HSL color. Defaults to `'decimal'`.
	 * @param options.includeAlpha Adds an alpha value to the color (RGBA). Defaults to `false`.
	 *
	 * @example
	 * faker.color.hsl() // [201, 0.23, 0.32]
	 * faker.color.hsl({ format: 'decimal' }) // [300, 0.21, 0.52]
	 * faker.color.hsl({ format: 'decimal', includeAlpha: true }) // [300, 0.21, 0.52, 0.28]
	 *
	 * @since 7.0.0
	 */
	hsl(options?: {
		format?: NumberColorFormat;
		includeAlpha?: boolean;
	}): number[];
	/**
	 * Returns an HSL color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated HSL color. Defaults to `'decimal'`.
	 * @param options.includeAlpha Adds an alpha value to the color (RGBA). Defaults to `false`.
	 *
	 * @example
	 * faker.color.hsl() // [201, 0.23, 0.32]
	 * faker.color.hsl({ format: 'decimal' }) // [300, 0.21, 0.52]
	 * faker.color.hsl({ format: 'decimal', includeAlpha: true }) // [300, 0.21, 0.52, 0.28]
	 * faker.color.hsl({ format: 'css' }) // hsl(0deg, 100%, 80%)
	 * faker.color.hsl({ format: 'css', includeAlpha: true }) // hsl(0deg 100% 50% / 0.5)
	 * faker.color.hsl({ format: 'binary' }) // (8-32 bits) x 3
	 * faker.color.hsl({ format: 'binary', includeAlpha: true }) // (8-32 bits) x 4
	 *
	 * @since 7.0.0
	 */
	hsl(options?: {
		format?: ColorFormat;
		includeAlpha?: boolean;
	}): string | number[];
	/**
	 * Returns an HWB color.
	 *
	 * @example
	 * faker.color.hwb() // [201, 0.21, 0.31]
	 *
	 * @since 7.0.0
	 */
	hwb(): number[];
	/**
	 * Returns an HWB color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.hwb() // [201, 0.21, 0.31]
	 * faker.color.hwb({ format: 'css' }) // hwb(194 0% 0%)
	 * faker.color.hwb({ format: 'binary' }) // (8-32 bits x 3)
	 *
	 * @since 7.0.0
	 */
	hwb(options?: {
		format?: StringColorFormat;
	}): string;
	/**
	 * Returns an HWB color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.hwb() // [201, 0.21, 0.31]
	 * faker.color.hwb({ format: 'decimal' }) // [201, 0.21, 0.31]
	 *
	 * @since 7.0.0
	 */
	hwb(options?: {
		format?: NumberColorFormat;
	}): number[];
	/**
	 * Returns an HWB color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.hwb() // [201, 0.21, 0.31]
	 * faker.color.hwb({ format: 'decimal' }) // [201, 0.21, 0.31]
	 * faker.color.hwb({ format: 'css' }) // hwb(194 0% 0%)
	 * faker.color.hwb({ format: 'binary' }) // (8-32 bits x 3)
	 *
	 * @since 7.0.0
	 */
	hwb(options?: {
		format?: ColorFormat;
	}): string | number[];
	/**
	 * Returns a LAB (CIELAB) color.
	 *
	 * @example
	 * faker.color.lab() // [0.832133, -80.3245, 100.1234]
	 *
	 * @since 7.0.0
	 */
	lab(): number[];
	/**
	 * Returns a LAB (CIELAB) color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.lab() // [0.832133, -80.3245, 100.1234]
	 * faker.color.lab({ format: 'css' }) // lab(29.2345% 39.3825 20.0664)
	 * faker.color.lab({ format: 'binary' }) // (8-32 bits x 3)
	 *
	 * @since 7.0.0
	 */
	lab(options?: {
		format?: StringColorFormat;
	}): string;
	/**
	 * Returns a LAB (CIELAB) color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.lab() // [0.832133, -80.3245, 100.1234]
	 * faker.color.lab({ format: 'decimal' }) // [0.856773, -80.2345, 100.2341]
	 *
	 * @since 7.0.0
	 */
	lab(options?: {
		format?: NumberColorFormat;
	}): number[];
	/**
	 * Returns a LAB (CIELAB) color.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.lab() // [0.832133, -80.3245, 100.1234]
	 * faker.color.lab({ format: 'decimal' }) // [0.856773, -80.2345, 100.2341]
	 * faker.color.lab({ format: 'css' }) // lab(29.2345% 39.3825 20.0664)
	 * faker.color.lab({ format: 'binary' }) // (8-32 bits x 3)
	 *
	 * @since 7.0.0
	 */
	lab(options?: {
		format?: ColorFormat;
	}): string | number[];
	/**
	 * Returns an LCH color. Even though upper bound of
	 * chroma in LCH color space is theoretically unbounded,
	 * it is bounded to 230 as anything above will not
	 * make a noticeable difference in the browser.
	 *
	 * @example
	 * faker.color.lch() // [0.522345, 72.2, 56.2]
	 *
	 * @since 7.0.0
	 */
	lch(): number[];
	/**
	 * Returns an LCH color. Even though upper bound of
	 * chroma in LCH color space is theoretically unbounded,
	 * it is bounded to 230 as anything above will not
	 * make a noticeable difference in the browser.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.lch() // [0.522345, 72.2, 56.2]
	 * faker.color.lch({ format: 'css' }) // lch(52.2345% 72.2 56.2)
	 * faker.color.lch({ format: 'binary' }) // (8-32 bits x 3)
	 *
	 * @since 7.0.0
	 */
	lch(options?: {
		format?: StringColorFormat;
	}): string;
	/**
	 * Returns an LCH color. Even though upper bound of
	 * chroma in LCH color space is theoretically unbounded,
	 * it is bounded to 230 as anything above will not
	 * make a noticeable difference in the browser.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.lch() // [0.522345, 72.2, 56.2]
	 * faker.color.lch({ format: 'decimal' }) // [0.522345, 72.2, 56.2]
	 *
	 * @since 7.0.0
	 */
	lch(options?: {
		format?: NumberColorFormat;
	}): number[];
	/**
	 * Returns an LCH color. Even though upper bound of
	 * chroma in LCH color space is theoretically unbounded,
	 * it is bounded to 230 as anything above will not
	 * make a noticeable difference in the browser.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 *
	 * @example
	 * faker.color.lch() // [0.522345, 72.2, 56.2]
	 * faker.color.lch({ format: 'decimal' }) // [0.522345, 72.2, 56.2]
	 * faker.color.lch({ format: 'css' }) // lch(52.2345% 72.2 56.2)
	 * faker.color.lch({ format: 'binary' }) // (8-32 bits x 3)
	 *
	 * @since 7.0.0
	 */
	lch(options?: {
		format?: ColorFormat;
	}): string | number[];
	/**
	 * Returns a random color based on CSS color space specified.
	 *
	 * @example
	 * faker.color.colorByCSSColorSpace() // [0.93, 1, 0.82]
	 *
	 * @since 7.0.0
	 */
	colorByCSSColorSpace(): number[];
	/**
	 * Returns a random color based on CSS color space specified.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 * @param options.space Color space to generate the color for. Defaults to `'sRGB'`.
	 *
	 * @example
	 * faker.color.colorByCSSColorSpace() // [0.93, 1, 0.82]
	 * faker.color.colorByCSSColorSpace({ format: 'css', space: 'display-p3' }) // color(display-p3 0.12 1 0.23)
	 * faker.color.colorByCSSColorSpace({ format: 'binary' }) // (8-32 bits x 3)
	 *
	 * @since 7.0.0
	 */
	colorByCSSColorSpace(options?: {
		format?: StringColorFormat;
		space?: CSSSpace;
	}): string;
	/**
	 * Returns a random color based on CSS color space specified.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 * @param options.space Color space to generate the color for. Defaults to `'sRGB'`.
	 *
	 * @example
	 * faker.color.colorByCSSColorSpace() // [0.93, 1, 0.82]
	 * faker.color.colorByCSSColorSpace({ format: 'decimal' }) // [0.12, 0.21, 0.31]
	 *
	 * @since 7.0.0
	 */
	colorByCSSColorSpace(options?: {
		format?: NumberColorFormat;
		space?: CSSSpace;
	}): number[];
	/**
	 * Returns a random color based on CSS color space specified.
	 *
	 * @param options Options object.
	 * @param options.format Format of generated RGB color. Defaults to `'decimal'`.
	 * @param options.space Color space to generate the color for. Defaults to `'sRGB'`.
	 *
	 * @example
	 * faker.color.colorByCSSColorSpace() // [0.93, 1, 0.82]
	 * faker.color.colorByCSSColorSpace({ format: 'decimal' }) // [0.12, 0.21, 0.31]
	 * faker.color.colorByCSSColorSpace({ format: 'css', space: 'display-p3' }) // color(display-p3 0.12 1 0.23)
	 * faker.color.colorByCSSColorSpace({ format: 'binary' }) // (8-32 bits x 3)
	 *
	 * @since 7.0.0
	 */
	colorByCSSColorSpace(options?: {
		format?: ColorFormat;
		space?: CSSSpace;
	}): string | number[];
}
/**
 * Module to generate commerce and product related entries.
 */
export declare class CommerceModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a human readable color name.
	 *
	 * @see faker.color.human()
	 *
	 * @example
	 * faker.commerce.color() // 'red'
	 *
	 * @since 3.0.0
	 *
	 * @deprecated
	 * Use `faker.color.human()` instead.
	 */
	color(): string;
	/**
	 * Returns a department inside a shop.
	 *
	 * @example
	 * faker.commerce.department() // 'Garden'
	 *
	 * @since 3.0.0
	 */
	department(): string;
	/**
	 * Generates a random descriptive product name.
	 *
	 * @example
	 * faker.commerce.productName() // 'Incredible Soft Gloves'
	 *
	 * @since 3.0.0
	 */
	productName(): string;
	/**
	 * Generates a price between min and max (inclusive).
	 *
	 * @param min The minimum price. Defaults to `1`.
	 * @param max The maximum price. Defaults to `1000`.
	 * @param dec The number of decimal places. Defaults to `2`.
	 * @param symbol The currency value to use. Defaults to `''`.
	 *
	 * @example
	 * faker.commerce.price() // 828.00
	 * faker.commerce.price(100) // 904.00
	 * faker.commerce.price(100, 200) // 154.00
	 * faker.commerce.price(100, 200, 0) // 133
	 * faker.commerce.price(100, 200, 0, '$') // $114
	 *
	 * @since 3.0.0
	 */
	price(min?: number, max?: number, dec?: number, symbol?: string): string;
	/**
	 * Returns an adjective describing a product.
	 *
	 * @example
	 * faker.commerce.productAdjective() // 'Handcrafted'
	 *
	 * @since 3.0.0
	 */
	productAdjective(): string;
	/**
	 * Returns a material of a product.
	 *
	 * @example
	 * faker.commerce.productMaterial() // 'Rubber'
	 *
	 * @since 3.0.0
	 */
	productMaterial(): string;
	/**
	 * Returns a short product name.
	 *
	 * @example
	 * faker.commerce.product() // 'Computer'
	 *
	 * @since 3.0.0
	 */
	product(): string;
	/**
	 * Returns a product description.
	 *
	 * @example
	 * faker.commerce.productDescription() // 'Andy shoes are designed to keeping...'
	 *
	 * @since 5.0.0
	 */
	productDescription(): string;
}
/**
 * Module to generate company related entries.
 */
export declare class CompanyModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns an array with possible company name suffixes.
	 *
	 * @example
	 * faker.company.suffixes() // [ 'Inc', 'and Sons', 'LLC', 'Group' ]
	 *
	 * @since 2.0.1
	 */
	suffixes(): string[];
	/**
	 * Generates a random company name.
	 *
	 * @param format The optional format index used to select a format. Deprecated, do not use.
	 *
	 * @example
	 * faker.company.name() // 'Zieme, Hauck and McClure'
	 *
	 * @since 7.4.0
	 */
	name(format?: number): string;
	/**
	 * Generates a random company name.
	 *
	 * @param format The optional format index used to select a format.
	 *
	 * @see faker.company.name()
	 *
	 * @example
	 * faker.company.companyName() // 'Zieme, Hauck and McClure'
	 *
	 * @since 2.0.1
	 *
	 * @deprecated Use `faker.company.name()` instead
	 */
	companyName(format?: number): string;
	/**
	 * Returns a random company suffix.
	 *
	 * @example
	 * faker.company.companySuffix() // 'and Sons'
	 *
	 * @since 2.0.1
	 */
	companySuffix(): string;
	/**
	 * Generates a random business catch phrase.
	 *
	 * @example
	 * faker.company.catchPhrase() // 'Upgradable systematic flexibility'
	 *
	 * @since 2.0.1
	 */
	catchPhrase(): string;
	/**
	 * Generates a random company bs phrase.
	 *
	 * @example
	 * faker.company.bs() // 'cultivate synergistic e-markets'
	 *
	 * @since 2.0.1
	 */
	bs(): string;
	/**
	 * Returns a random catch phrase adjective.
	 *
	 * @example
	 * faker.company.catchPhraseAdjective() // 'Multi-tiered'
	 *
	 * @since 2.0.1
	 */
	catchPhraseAdjective(): string;
	/**
	 * Returns a random catch phrase descriptor.
	 *
	 * @example
	 * faker.company.catchPhraseDescriptor() // 'composite'
	 *
	 * @since 2.0.1
	 */
	catchPhraseDescriptor(): string;
	/**
	 * Returns a random catch phrase noun.
	 *
	 * @example
	 * faker.company.catchPhraseNoun() // 'leverage'
	 *
	 * @since 2.0.1
	 */
	catchPhraseNoun(): string;
	/**
	 * Returns a random company bs adjective.
	 *
	 * @example
	 * faker.company.bsAdjective() // 'one-to-one'
	 *
	 * @since 2.0.1
	 */
	bsAdjective(): string;
	/**
	 * Returns a random company bs buzz word.
	 *
	 * @example
	 * faker.company.bsBuzz() // 'empower'
	 *
	 * @since 2.0.1
	 */
	bsBuzz(): string;
	/**
	 * Returns a random company bs noun.
	 *
	 * @example
	 * faker.company.bsNoun() // 'paradigms'
	 *
	 * @since 2.0.1
	 */
	bsNoun(): string;
}
/**
 * Module to generate database related entries.
 */
export declare class DatabaseModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random database column name.
	 *
	 * @example
	 * faker.database.column() // 'createdAt'
	 *
	 * @since 4.0.0
	 */
	column(): string;
	/**
	 * Returns a random database column type.
	 *
	 * @example
	 * faker.database.type() // 'timestamp'
	 *
	 * @since 4.0.0
	 */
	type(): string;
	/**
	 * Returns a random database collation.
	 *
	 * @example
	 * faker.database.collation() // 'utf8_unicode_ci'
	 *
	 * @since 4.0.0
	 */
	collation(): string;
	/**
	 * Returns a random database engine.
	 *
	 * @example
	 * faker.database.engine() // 'ARCHIVE'
	 *
	 * @since 4.0.0
	 */
	engine(): string;
	/**
	 * Returns a MongoDB [ObjectId](https://docs.mongodb.com/manual/reference/method/ObjectId/) string.
	 *
	 * @example
	 * faker.database.mongodbObjectId() // 'e175cac316a79afdd0ad3afb'
	 *
	 * @since 6.2.0
	 */
	mongodbObjectId(): string;
}
/**
 * Module to generate various primitive values and data types.
 */
export declare class DatatypeModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a single random number between zero and the given max value or the given range with the specified precision.
	 * The bounds are inclusive.
	 *
	 * @param options Maximum value or options object.
	 * @param options.min Lower bound for generated number. Defaults to `0`.
	 * @param options.max Upper bound for generated number. Defaults to `min + 99999`.
	 * @param options.precision Precision of the generated number. Defaults to `1`.
	 *
	 * @throws When options define `max < min`.
	 *
	 * @example
	 * faker.datatype.number() // 55422
	 * faker.datatype.number(100) // 52
	 * faker.datatype.number({ min: 1000000 }) // 1031433
	 * faker.datatype.number({ max: 100 }) // 42
	 * faker.datatype.number({ precision: 0.01 }) // 64246.18
	 * faker.datatype.number({ min: 10, max: 100, precision: 0.01 }) // 36.94
	 *
	 * @since 5.5.0
	 */
	number(options?: number | {
		min?: number;
		max?: number;
		precision?: number;
	}): number;
	/**
	 * Returns a single random floating-point number for the given precision or range and precision.
	 *
	 * @param options Precision or options object.
	 * @param options.min Lower bound for generated number. Defaults to `0`.
	 * @param options.max Upper bound for generated number. Defaults to `99999`.
	 * @param options.precision Precision of the generated number. Defaults to `0.01`.
	 *
	 * @example
	 * faker.datatype.float() // 51696.36
	 * faker.datatype.float(0.1) // 52023.2
	 * faker.datatype.float({ min: 1000000 }) // 212859.76
	 * faker.datatype.float({ max: 100 }) // 28.11
	 * faker.datatype.float({ precision: 0.1 }) // 84055.3
	 * faker.datatype.float({ min: 10, max: 100, precision: 0.001 }) // 57.315
	 *
	 * @since 5.5.0
	 */
	float(options?: number | {
		min?: number;
		max?: number;
		precision?: number;
	}): number;
	/**
	 * Returns a Date object using a random number of milliseconds since
	 * the [Unix Epoch](https://en.wikipedia.org/wiki/Unix_time) (1 January 1970 UTC).
	 *
	 * @param options Max number of milliseconds since unix epoch or options object.
	 * @param options.min Lower bound for milliseconds since base date.
	 *    When not provided or smaller than `-8640000000000000`, `1990-01-01` is considered
	 *    as minimum generated date. Defaults to `631152000000`.
	 * @param options.max Upper bound for milliseconds since base date.
	 *    When not provided or larger than `8640000000000000`, `2100-01-01` is considered
	 *    as maximum generated date. Defaults to `4102444800000`.
	 *
	 * @example
	 * faker.datatype.datetime() // '2089-04-17T18:03:24.956Z'
	 * faker.datatype.datetime(1893456000000) // '2022-03-28T07:00:56.876Z'
	 * faker.datatype.datetime({ min: 1577836800000, max: 1893456000000 }) // '2021-09-12T07:13:00.255Z'
	 *
	 * @since 5.5.0
	 */
	datetime(options?: number | {
		min?: number;
		max?: number;
	}): Date;
	/**
	 * Returns a string containing UTF-16 chars between 33 and 125 (`!` to `}`).
	 *
	 * @param length Length of the generated string. Max length is `2^20`. Defaults to `10`.
	 *
	 * @example
	 * faker.datatype.string() // 'Zo!.:*e>wR'
	 * faker.datatype.string(5) // '6Bye8'
	 *
	 * @since 5.5.0
	 */
	string(length?: number): string;
	/**
	 * Returns a UUID v4 ([Universally Unique Identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)).
	 *
	 * @example
	 * faker.datatype.uuid() // '4136cd0b-d90b-4af7-b485-5d1ded8db252'
	 *
	 * @since 5.5.0
	 */
	uuid(): string;
	/**
	 * Returns the boolean value true or false.
	 *
	 * @example
	 * faker.datatype.boolean() // false
	 *
	 * @since 5.5.0
	 */
	boolean(): boolean;
	/**
	 * Returns a [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) number.
	 *
	 * @param options The optional options object.
	 * @param options.length Length of the generated number. Defaults to `1`.
	 * @param options.prefix Prefix for the generated number. Defaults to `'0x'`.
	 * @param options.case Case of the generated number. Defaults to `'mixed'`.
	 *
	 * @example
	 * faker.datatype.hexadecimal() // '0xB'
	 * faker.datatype.hexadecimal({ length: 10 }) // '0xaE13d044cB'
	 * faker.datatype.hexadecimal({ prefix: '0x' }) // '0xE'
	 * faker.datatype.hexadecimal({ case: 'lower' }) // '0xf'
	 * faker.datatype.hexadecimal({ length: 10, prefix: '#' }) // '#f12a974eB1'
	 * faker.datatype.hexadecimal({ length: 10, case: 'upper' }) // '0xE3F38014FB'
	 * faker.datatype.hexadecimal({ prefix: '', case: 'lower' }) // 'd'
	 * faker.datatype.hexadecimal({ length: 10, prefix: '0x', case: 'mixed' }) // '0xAdE330a4D1'
	 *
	 * @since 6.1.2
	 */
	hexadecimal(options?: {
		length?: number;
		prefix?: string;
		case?: "lower" | "upper" | "mixed";
	} | number): string;
	/**
	 * Returns a string representing JSON object with 7 pre-defined properties.
	 *
	 * @example
	 * faker.datatype.json() // `{"foo":"mxz.v8ISij","bar":29154,"bike":8658,"a":"GxTlw$nuC:","b":40693,"name":"%'<FTou{7X","prop":"X(bd4iT>77"}`
	 *
	 * @since 5.5.0
	 */
	json(): string;
	/**
	 * Returns an array with random strings and numbers.
	 *
	 * @param length Size of the returned array. Defaults to `10`.
	 *
	 * @example
	 * faker.datatype.array() // [ 94099, 85352, 'Hz%T.C\\l;8', '|#gmtw3otS', '2>:rJ|3$&d', 56864, 'Ss2-p0RXSI', 51084, 2039, 'mNEU[.r0Vf' ]
	 * faker.datatype.array(3) // [ 61845, 'SK7H$W3:d*', 'm[%7N8*GVK' ]
	 *
	 * @since 5.5.0
	 */
	array(length?: number): Array<string | number>;
	/**
	 * Returns a [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#bigint_type) number.
	 *
	 * @param options Maximum value or options object.
	 * @param options.min Lower bound for generated bigint. Defaults to `0n`.
	 * @param options.max Upper bound for generated bigint. Defaults to `min + 999999999999999n`.
	 *
	 * @throws When options define `max < min`.
	 *
	 * @example
	 * faker.datatype.bigInt() // 55422n
	 * faker.datatype.bigInt(100n) // 52n
	 * faker.datatype.bigInt({ min: 1000000n }) // 431433n
	 * faker.datatype.bigInt({ max: 100n }) // 42n
	 * faker.datatype.bigInt({ min: 10n, max: 100n }) // 36n
	 *
	 * @since 6.0.0
	 */
	bigInt(options?: bigint | boolean | number | string | {
		min?: bigint | boolean | number | string;
		max?: bigint | boolean | number | string;
	}): bigint;
}
/**
 * Module to generate dates.
 */
export declare class DateModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates a random date in the past.
	 *
	 * @param years The range of years the date may be in the past. Defaults to `1`.
	 * @param refDate The date to use as reference point for the newly generated date. Defaults to now.
	 *
	 * @see faker.date.recent()
	 *
	 * @example
	 * faker.date.past() // '2021-12-03T05:40:44.408Z'
	 * faker.date.past(10) // '2017-10-25T21:34:19.488Z'
	 * faker.date.past(10, '2020-01-01T00:00:00.000Z') // '2017-08-18T02:59:12.350Z'
	 *
	 * @since 2.0.1
	 */
	past(years?: number, refDate?: string | Date | number): Date;
	/**
	 * Generates a random date in the future.
	 *
	 * @param years The range of years the date may be in the future. Defaults to `1`.
	 * @param refDate The date to use as reference point for the newly generated date. Defaults to now.
	 *
	 * @see faker.date.soon()
	 *
	 * @example
	 * faker.date.future() // '2022-11-19T05:52:49.100Z'
	 * faker.date.future(10) // '2030-11-23T09:38:28.710Z'
	 * faker.date.future(10, '2020-01-01T00:00:00.000Z') // '2020-12-13T22:45:10.252Z'
	 *
	 * @since 2.0.1
	 */
	future(years?: number, refDate?: string | Date | number): Date;
	/**
	 * Generates a random date between the given boundaries.
	 *
	 * @param from The early date boundary.
	 * @param to The late date boundary.
	 *
	 * @example
	 * faker.date.between('2020-01-01T00:00:00.000Z', '2030-01-01T00:00:00.000Z') // '2026-05-16T02:22:53.002Z'
	 *
	 * @since 2.0.1
	 */
	between(from: string | Date | number, to: string | Date | number): Date;
	/**
	 * Generates n random dates between the given boundaries.
	 *
	 * @param from The early date boundary.
	 * @param to The late date boundary.
	 * @param num The number of dates to generate. Defaults to `3`.
	 *
	 * @example
	 * faker.date.betweens('2020-01-01T00:00:00.000Z', '2030-01-01T00:00:00.000Z')
	 * // [
	 * //   2022-07-02T06:00:00.000Z,
	 * //   2024-12-31T12:00:00.000Z,
	 * //   2027-07-02T18:00:00.000Z
	 * // ]
	 * faker.date.betweens('2020-01-01T00:00:00.000Z', '2030-01-01T00:00:00.000Z', 2)
	 * // [ 2023-05-02T16:00:00.000Z, 2026-09-01T08:00:00.000Z ]
	 *
	 * @since 5.4.0
	 */
	betweens(from: string | Date | number, to: string | Date | number, num?: number): Date[];
	/**
	 * Generates a random date in the recent past.
	 *
	 * @param days The range of days the date may be in the past. Defaults to `1`.
	 * @param refDate The date to use as reference point for the newly generated date. Defaults to now.
	 *
	 * @see faker.date.past()
	 *
	 * @example
	 * faker.date.recent() // '2022-02-04T02:09:35.077Z'
	 * faker.date.recent(10) // '2022-01-29T06:12:12.829Z'
	 * faker.date.recent(10, '2020-01-01T00:00:00.000Z') // '2019-12-27T18:11:19.117Z'
	 *
	 * @since 2.0.1
	 */
	recent(days?: number, refDate?: string | Date | number): Date;
	/**
	 * Generates a random date in the near future.
	 *
	 * @param days The range of days the date may be in the future. Defaults to `1`.
	 * @param refDate The date to use as reference point for the newly generated date. Defaults to now.
	 *
	 * @see faker.date.future()
	 *
	 * @example
	 * faker.date.soon() // '2022-02-05T09:55:39.216Z'
	 * faker.date.soon(10) // '2022-02-11T05:14:39.138Z'
	 * faker.date.soon(10, '2020-01-01T00:00:00.000Z') // '2020-01-01T02:40:44.990Z'
	 *
	 * @since 5.0.0
	 */
	soon(days?: number, refDate?: string | Date | number): Date;
	/**
	 * Returns a random name of a month.
	 *
	 * @param options The optional options to use.
	 * @param options.abbr Whether to return an abbreviation. Defaults to `false`.
	 * @param options.context Whether to return the name of a month in a context. Defaults to `false`.
	 *
	 * @example
	 * faker.date.month() // 'October'
	 * faker.date.month({ abbr: true }) // 'Feb'
	 * faker.date.month({ context: true }) // 'June'
	 * faker.date.month({ abbr: true, context: true }) // 'Sep'
	 *
	 * @since 3.0.1
	 */
	month(options?: {
		abbr?: boolean;
		context?: boolean;
	}): string;
	/**
	 * Returns a random day of the week.
	 *
	 * @param options The optional options to use.
	 * @param options.abbr Whether to return an abbreviation. Defaults to `false`.
	 * @param options.context Whether to return the day of the week in a context. Defaults to `false`.
	 *
	 * @example
	 * faker.date.weekday() // 'Monday'
	 * faker.date.weekday({ abbr: true }) // 'Thu'
	 * faker.date.weekday({ context: true }) // 'Thursday'
	 * faker.date.weekday({ abbr: true, context: true }) // 'Fri'
	 *
	 * @since 3.0.1
	 */
	weekday(options?: {
		abbr?: boolean;
		context?: boolean;
	}): string;
	/**
	 * Returns a random birthdate.
	 *
	 * @param options The options to use to generate the birthdate. If no options are set, an age between 18 and 80 (inclusive) is generated.
	 * @param options.min The minimum age or year to generate a birthdate.
	 * @param options.max The maximum age or year to generate a birthdate.
	 * @param options.refDate The date to use as reference point for the newly generated date. Defaults to `now`.
	 * @param options.mode The mode to generate the birthdate. Supported modes are `'age'` and `'year'` .
	 *
	 * There are two modes available `'age'` and `'year'`:
	 * - `'age'`: The min and max options define the age of the person (e.g. `18` - `42`).
	 * - `'year'`: The min and max options define the range the birthdate may be in (e.g. `1900` - `2000`).
	 *
	 * Defaults to `year`.
	 *
	 * @example
	 * faker.date.birthdate() // 1977-07-10T01:37:30.719Z
	 * faker.date.birthdate({ min: 18, max: 65, mode: 'age' }) // 2003-11-02T20:03:20.116Z
	 * faker.date.birthdate({ min: 1900, max: 2000, mode: 'year' }) // 1940-08-20T08:53:07.538Z
	 *
	 * @since 7.0.0
	 */
	birthdate(options?: {
		min?: number;
		max?: number;
		mode?: "age" | "year";
		refDate?: string | Date | number;
	}): Date;
}
/**
 * Generator method for combining faker methods based on string input.
 *
 * @deprecated
 */
export declare class FakeModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generator for combining faker methods based on a static string input.
	 *
	 * Note: We recommend using string template literals instead of `fake()`,
	 * which are faster and strongly typed (if you are using TypeScript),
	 * e.g. ``const address = `${faker.address.zipCode()} ${faker.address.city()}`;``
	 *
	 * This method is useful if you have to build a random string from a static, non-executable source
	 * (e.g. string coming from a user, stored in a database or a file).
	 *
	 * It checks the given string for placeholders and replaces them by calling faker methods:
	 *
	 * ```js
	 * const hello = faker.fake('Hi, my name is {{name.firstName}} {{name.lastName}}!')
	 * ```
	 *
	 * This would use the `faker.name.firstName()` and `faker.name.lastName()` method to resolve the placeholders respectively.
	 *
	 * It is also possible to provide parameters. At first, they will be parsed as json,
	 * and if that isn't possible, we will fall back to string:
	 *
	 * ```js
	 * const message = faker.fake(`You can call me at {{phone.number(+!# !## #### #####!)}}.')
	 * ```
	 *
	 * Currently it is not possible to set more than a single parameter.
	 *
	 * It is also NOT possible to use any non-faker methods or plain javascript in such templates.
	 *
	 * @param str The template string that will get interpolated. Must not be empty.
	 *
	 * @see faker.helpers.mustache() to use custom functions for resolution.
	 * @see faker.helpers.fake()
	 *
	 * @example
	 * faker.fake('{{name.lastName}}') // 'Barrows'
	 * faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}') // 'Durgan, Noe MD'
	 * faker.fake('This is static test.') // 'This is static test.'
	 * faker.fake('Good Morning {{name.firstName}}!') // 'Good Morning Estelle!'
	 * faker.fake('You can call me at {{phone.number(!## ### #####!)}}.') // 'You can call me at 202 555 973722.'
	 * faker.fake('I flipped the coin and got: {{helpers.arrayElement(["heads", "tails"])}}') // 'I flipped the coin and got: tails'
	 *
	 * @since 3.0.0
	 *
	 * @deprecated Use faker.helpers.fake() instead.
	 */
	fake(str: string): string;
}
/**
 * Module to generate finance related entries.
 */
export declare class FinanceModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates a random account number.
	 *
	 * @param length The length of the account number. Defaults to `8`.
	 *
	 * @example
	 * faker.finance.account() // 92842238
	 * faker.finance.account(5) // 32564
	 *
	 * @since 2.0.1
	 */
	account(length?: number): string;
	/**
	 * Generates a random account name.
	 *
	 * @example
	 * faker.finance.accountName() // 'Personal Loan Account'
	 *
	 * @since 2.0.1
	 */
	accountName(): string;
	/**
	 * Generates a random routing number.
	 *
	 * @example
	 * faker.finance.routingNumber() // '522814402'
	 *
	 * @since 5.0.0
	 */
	routingNumber(): string;
	/**
	 * Generates a random masked number.
	 *
	 * @param length The length of the unmasked number. Defaults to `4`.
	 * @param parens Whether to use surrounding parenthesis. Defaults to `true`.
	 * @param ellipsis Whether to prefix the numbers with an ellipsis. Defaults to `true`.
	 *
	 * @example
	 * faker.finance.mask() // '(...9711)'
	 * faker.finance.mask(3) // '(...342)'
	 * faker.finance.mask(3, false) // '...236'
	 * faker.finance.mask(3, false, false) // '298'
	 *
	 * @since 2.0.1
	 */
	mask(length?: number, parens?: boolean, ellipsis?: boolean): string;
	/**
	 * Generates a random amount between the given bounds (inclusive).
	 *
	 * @param min The lower bound for the amount. Defaults to `0`.
	 * @param max The upper bound for the amount. Defaults to `1000`.
	 * @param dec The number of decimal places for the amount. Defaults to `2`.
	 * @param symbol The symbol used to prefix the amount. Defaults to `''`.
	 * @param autoFormat If true this method will use `Number.toLocaleString()`. Otherwise it will use `Number.toFixed()`.
	 *
	 * @example
	 * faker.finance.amount() // '617.87'
	 * faker.finance.amount(5, 10) // '5.53'
	 * faker.finance.amount(5, 10, 0) // '8'
	 * faker.finance.amount(5, 10, 2, '$') // '$5.85'
	 * faker.finance.amount(5, 10, 5, '', true) // '9,75067'
	 *
	 * @since 2.0.1
	 */
	amount(min?: number, max?: number, dec?: number, symbol?: string, autoFormat?: boolean): string;
	/**
	 * Returns a random transaction type.
	 *
	 * @example
	 * faker.finance.transactionType() // 'payment'
	 *
	 * @since 2.0.1
	 */
	transactionType(): string;
	/**
	 * Returns a random currency code.
	 * (The short text/abbreviation for the currency (e.g. `US Dollar` -> `USD`))
	 *
	 * @example
	 * faker.finance.currencyCode() // 'USD'
	 *
	 * @since 2.0.1
	 */
	currencyCode(): string;
	/**
	 * Returns a random currency name.
	 *
	 * @example
	 * faker.finance.currencyName() // 'US Dollar'
	 *
	 * @since 2.0.1
	 */
	currencyName(): string;
	/**
	 * Returns a random currency symbol.
	 *
	 * @example
	 * faker.finance.currencySymbol() // '$'
	 *
	 * @since 2.0.1
	 */
	currencySymbol(): string;
	/**
	 * Generates a random Bitcoin address.
	 *
	 * @example
	 * faker.finance.bitcoinAddress() // '3ySdvCkTLVy7gKD4j6JfSaf5d'
	 *
	 * @since 3.1.0
	 */
	bitcoinAddress(): string;
	/**
	 * Generates a random Litecoin address.
	 *
	 * @example
	 * faker.finance.litecoinAddress() // 'MoQaSTGWBRXkWfyxKbNKuPrAWGELzcW'
	 *
	 * @since 5.0.0
	 */
	litecoinAddress(): string;
	/**
	 * Generates a random credit card number.
	 *
	 * @param issuer The name of the issuer (case insensitive) or the format used to generate one.
	 *
	 * @example
	 * faker.finance.creditCardNumber() // '4427163488662'
	 * faker.finance.creditCardNumber('visa') // '4882664999007'
	 * faker.finance.creditCardNumber('63[7-9]#-####-####-###L') // '6375-3265-4676-6646'
	 *
	 * @since 5.0.0
	 */
	creditCardNumber(issuer?: string): string;
	/**
	 * Generates a random credit card CVV.
	 *
	 * @example
	 * faker.finance.creditCardCVV() // '506'
	 *
	 * @since 5.0.0
	 */
	creditCardCVV(): string;
	/**
	 * Returns a random credit card issuer.
	 *
	 * @example
	 * faker.finance.creditCardIssuer() // 'discover'
	 *
	 * @since 6.3.0
	 */
	creditCardIssuer(): string;
	/**
	 * Generates a random PIN number.
	 *
	 * @param length The length of the PIN to generate. Defaults to `4`.
	 * @throws Will throw an error if length is less than 1.
	 *
	 * @example
	 * faker.finance.pin() // '5067'
	 * faker.finance.pin(6) // '213789'
	 *
	 * @since 6.2.0
	 */
	pin(length?: number): string;
	/**
	 * Generates a random Ethereum address.
	 *
	 * @example
	 * faker.finance.ethereumAddress() // '0xf03dfeecbafc5147241cc4c4ca20b3c9dfd04c4a'
	 *
	 * @since 5.0.0
	 */
	ethereumAddress(): string;
	/**
	 * Generates a random iban.
	 *
	 * @param formatted Return a formatted version of the generated IBAN. Defaults to `false`.
	 * @param countryCode The country code from which you want to generate an IBAN, if none is provided a random country will be used.
	 * @throws Will throw an error if the passed country code is not supported.
	 *
	 * @example
	 * faker.finance.iban() // 'TR736918640040966092800056'
	 * faker.finance.iban(true) // 'FR20 8008 2330 8984 74S3 Z620 224'
	 * faker.finance.iban(true, 'DE') // 'DE84 1022 7075 0900 1170 01'
	 *
	 * @since 4.0.0
	 */
	iban(formatted?: boolean, countryCode?: string): string;
	/**
	 * Generates a random SWIFT/BIC code based on the [ISO-9362](https://en.wikipedia.org/wiki/ISO_9362) format.
	 *
	 * @param options Options object.
	 * @param options.includeBranchCode Whether to include a three-digit branch code at the end of the generated code. Defaults to a random boolean value.
	 *
	 * @example
	 * faker.finance.bic() // 'WYAUPGX1'
	 * faker.finance.bic({ includeBranchCode: true }) // 'KCAUPGR1432'
	 * faker.finance.bic({ includeBranchCode: false }) // 'XDAFQGT7'
	 *
	 * @since 4.0.0
	 */
	bic(options?: {
		includeBranchCode?: boolean;
	}): string;
	/**
	 * Generates a random transaction description.
	 *
	 * @example
	 * faker.finance.transactionDescription()
	 * // 'invoice transaction at Kilback - Durgan using card ending with ***(...4316) for UAH 783.82 in account ***16168663'
	 *
	 * @since 5.1.0
	 */
	transactionDescription(): string;
}
/**
 * Module to generate git related entries.
 */
export declare class GitModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates a random branch name.
	 *
	 * @example
	 * faker.git.branch() // 'feed-parse'
	 *
	 * @since 5.0.0
	 */
	branch(): string;
	/**
	 * Generates a random commit entry.
	 *
	 * @param options Options for the commit entry.
	 * @param options.merge Set to `true` to generate a merge message line.
	 * @param options.eol Choose the end of line character to use. Defaults to 'CRLF'.
	 * 'LF' = '\n',
	 * 'CRLF' = '\r\n'
	 *
	 * @example
	 * faker.git.commitEntry()
	 * // commit fe8c38a965d13d9794eb36918cb24cebe49a45c2
	 * // Author: Mable Harvey <Cynthia_Quigley@yahoo.com>
	 * // Date: Sat Feb 05 2022 15:09:18 GMT+0100 (Mitteleuropäische Normalzeit)
	 * //
	 * //     copy primary system
	 *
	 * @since 5.0.0
	 */
	commitEntry(options?: {
		merge?: boolean;
		eol?: "LF" | "CRLF";
	}): string;
	/**
	 * Generates a random commit message.
	 *
	 * @example
	 * faker.git.commitMessage() // 'reboot cross-platform driver'
	 *
	 * @since 5.0.0
	 */
	commitMessage(): string;
	/**
	 * Generates a random commit sha (full).
	 *
	 * @example
	 * faker.git.commitSha() // '2c6e3880fd94ddb7ef72d34e683cdc0c47bec6e6'
	 *
	 * @since 5.0.0
	 */
	commitSha(): string;
	/**
	 * Generates a random commit sha (short).
	 *
	 * @example
	 * faker.git.shortSha() // '6155732'
	 *
	 * @since 5.0.0
	 */
	shortSha(): string;
}
/**
 * Module to generate hacker/IT words and phrases.
 */
export declare class HackerModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random hacker/IT abbreviation.
	 *
	 * @example
	 * faker.hacker.abbreviation() // 'THX'
	 *
	 * @since 2.0.1
	 */
	abbreviation(): string;
	/**
	 * Returns a random hacker/IT adjective.
	 *
	 * @example
	 * faker.hacker.adjective() // 'cross-platform'
	 *
	 * @since 2.0.1
	 */
	adjective(): string;
	/**
	 * Returns a random hacker/IT noun.
	 *
	 * @example
	 * faker.hacker.noun() // 'system'
	 *
	 * @since 2.0.1
	 */
	noun(): string;
	/**
	 * Returns a random hacker/IT verb.
	 *
	 * @example
	 * faker.hacker.verb() // 'copy'
	 *
	 * @since 2.0.1
	 */
	verb(): string;
	/**
	 * Returns a random hacker/IT verb for continuous actions (en: ing suffix; e.g. hacking).
	 *
	 * @example
	 * faker.hacker.ingverb() // 'navigating'
	 *
	 * @since 2.0.1
	 */
	ingverb(): string;
	/**
	 * Generates a random hacker/IT phrase.
	 *
	 * @example
	 * faker.hacker.phrase()
	 * // 'If we override the card, we can get to the HDD feed through the back-end HDD sensor!'
	 *
	 * @since 2.0.1
	 */
	phrase(): string;
}
export declare type RecordKey = string | number | symbol;
/**
 * Module with various helper methods that transform the method input rather than returning values from locales.
 * The transformation process may call methods that use the locale data.
 */
export declare class HelpersModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Slugifies the given string.
	 * For that all spaces (` `) are replaced by hyphens (`-`)
	 * and most non word characters except for dots and hyphens will be removed.
	 *
	 * @param string The input to slugify.
	 *
	 * @example
	 * faker.helpers.slugify() // ''
	 * faker.helpers.slugify("Hello world!") // 'Hello-world'
	 *
	 * @since 2.0.1
	 */
	slugify(string?: string): string;
	/**
	 * Parses the given string symbol by symbol and replaces the placeholders with digits (`0` - `9`).
	 * `!` will be replaced by digits >=2 (`2` - `9`).
	 *
	 * @param string The template string to parse.
	 * @param symbol The symbol to replace with digits. Defaults to `'#'`.
	 *
	 * @example
	 * faker.helpers.replaceSymbolWithNumber() // ''
	 * faker.helpers.replaceSymbolWithNumber('#####') // '04812'
	 * faker.helpers.replaceSymbolWithNumber('!####') // '27378'
	 * faker.helpers.replaceSymbolWithNumber('Your pin is: !####') // '29841'
	 *
	 * @since 2.0.1
	 */
	replaceSymbolWithNumber(string?: string, symbol?: string): string;
	/**
	 * Parses the given string symbol by symbols and replaces the placeholder appropriately.
	 *
	 * - `#` will be replaced with a digit (`0` - `9`).
	 * - `?` will be replaced with an upper letter ('A' - 'Z')
	 * - and `*` will be replaced with either a digit or letter.
	 *
	 * @param string The template string to parse.
	 *
	 * @example
	 * faker.helpers.replaceSymbols() // ''
	 * faker.helpers.replaceSymbols('#####') // '98441'
	 * faker.helpers.replaceSymbols('?????') // 'ZYRQQ'
	 * faker.helpers.replaceSymbols('*****') // '4Z3P7'
	 * faker.helpers.replaceSymbols('Your pin is: #?*#?*') // '0T85L1'
	 *
	 * @since 3.0.0
	 */
	replaceSymbols(string?: string): string;
	/**
	 * Replaces the symbols and patterns in a credit card schema including Luhn checksum.
	 *
	 * This method supports both range patterns `[4-9]` as well as the patterns used by `replaceSymbolWithNumber()`.
	 * `L` will be replaced with the appropriate Luhn checksum.
	 *
	 * @param string The credit card format pattern. Defaults to `6453-####-####-####-###L`.
	 * @param symbol The symbol to replace with a digit.
	 *
	 * @example
	 * faker.helpers.replaceCreditCardSymbols() // '6453-4876-8626-8995-3771'
	 * faker.helpers.replaceCreditCardSymbols('1234-[4-9]-##!!-L') // '1234-9-5298-2'
	 *
	 * @since 5.0.0
	 */
	replaceCreditCardSymbols(string?: string, symbol?: string): string;
	/**
	 * Repeats the given string the given number of times.
	 *
	 * @param string The string to repeat. Defaults to `''`.
	 * @param num The number of times to repeat it. Defaults to `0`.
	 *
	 * @example
	 * faker.helpers.repeatString('Hello world! ') // ''
	 * faker.helpers.repeatString('Hello world! ', 1) // 'Hello world! '
	 * faker.helpers.repeatString('Hello world! ', 2) // 'Hello world! Hello world! '
	 *
	 * @since 5.0.0
	 *
	 * @deprecated Use [String.prototype.repeat()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat) instead.
	 */
	repeatString(string?: string, num?: number): string;
	/**
	 * Replaces the regex like expressions in the given string with matching values.
	 *
	 * Supported patterns:
	 * - `.{times}` => Repeat the character exactly `times` times.
	 * - `.{min,max}` => Repeat the character `min` to `max` times.
	 * - `[min-max]` => Generate a number between min and max (inclusive).
	 *
	 * @param string The template string to to parse.
	 *
	 * @example
	 * faker.helpers.regexpStyleStringParse() // ''
	 * faker.helpers.regexpStyleStringParse('#{5}') // '#####'
	 * faker.helpers.regexpStyleStringParse('#{2,9}') // '#######'
	 * faker.helpers.regexpStyleStringParse('[500-15000]') // '8375'
	 * faker.helpers.regexpStyleStringParse('#{3}test[1-5]') // '###test3'
	 *
	 * @since 5.0.0
	 */
	regexpStyleStringParse(string?: string): string;
	/**
	 * Takes an array and randomizes it in place then returns it.
	 *
	 * Uses the modern version of the Fisher–Yates algorithm.
	 *
	 * @template T The type of the entries to shuffle.
	 * @param o The array to shuffle. Defaults to `[]`.
	 *
	 * @example
	 * faker.helpers.shuffle() // []
	 * faker.helpers.shuffle(['a', 'b', 'c']) // [ 'b', 'c', 'a' ]
	 *
	 * @since 2.0.1
	 */
	shuffle<T>(o?: T[]): T[];
	/**
	 * Takes an array of strings or function that returns a string
	 * and outputs a unique array of strings based on that source.
	 * This method does not store the unique state between invocations.
	 *
	 * @template T The type of the entries.
	 * @param source The strings to choose from or a function that generates a string.
	 * @param length The number of elements to generate.
	 *
	 * @example
	 * faker.helpers.uniqueArray(faker.random.word, 50)
	 * faker.helpers.uniqueArray(faker.definitions.name.first_name, 6)
	 * faker.helpers.uniqueArray(["Hello", "World", "Goodbye"], 2)
	 *
	 * @since 6.0.0
	 */
	uniqueArray<T>(source: readonly T[] | (() => T), length: number): T[];
	/**
	 * Replaces the `{{placeholder}}` patterns in the given string mustache style.
	 *
	 * @param str The template string to parse.
	 * @param data The data used to populate the placeholders.
	 * This is a record where the key is the template placeholder,
	 * whereas the value is either a string or a function suitable for `String.replace()`.
	 *
	 * @example
	 * faker.helpers.mustache('I found {{count}} instances of "{{word}}".', {
	 *   count: () => `${faker.datatype.number()}`,
	 *   word: "this word",
	 * }) // 'I found 57591 instances of "this word".'
	 *
	 * @since 2.0.1
	 */
	mustache(str: string | undefined, data: Record<string, string | Parameters<string["replace"]>[1]>): string;
	/**
	 * Returns the result of the callback if the probability check was successful, otherwise `undefined`.
	 *
	 * @template T The type of result of the given callback.
	 * @param callback The callback to that will be invoked if the probability check was successful.
	 * @param options The options to use. Defaults to `{}`.
	 * @param options.probability The probability (`[0.00, 1.00]`) of the callback being invoked. Defaults to `0.5`.
	 *
	 * @example
	 * faker.helpers.maybe(() => 'Hello World!') // 'Hello World!'
	 * faker.helpers.maybe(() => 'Hello World!', { probability: 0.1 }) // undefined
	 * faker.helpers.maybe(() => 'Hello World!', { probability: 0.9 }) // 'Hello World!'
	 *
	 * @since 6.3.0
	 */
	maybe<T>(callback: () => T, options?: {
		probability?: number;
	}): T | undefined;
	/**
	 * Returns a random key from given object or `undefined` if no key could be found.
	 *
	 * @param object The object to be used.
	 *
	 * @example
	 * faker.helpers.objectKey({ myProperty: 'myValue' }) // 'myProperty'
	 *
	 * @since 6.3.0
	 */
	objectKey<T extends Record<string, unknown>>(object: T): keyof T;
	/**
	 * Returns a random value from given object or `undefined` if no key could be found.
	 *
	 * @param object The object to be used.
	 *
	 * @example
	 * faker.helpers.objectValue({ myProperty: 'myValue' }) // 'myValue'
	 *
	 * @since 6.3.0
	 */
	objectValue<T extends Record<string, unknown>>(object: T): T[keyof T];
	/**
	 * Returns random element from the given array.
	 *
	 * @template T The type of the entries to pick from.
	 * @param array Array to pick the value from.
	 *
	 * @example
	 * faker.helpers.arrayElement(['cat', 'dog', 'mouse']) // 'dog'
	 *
	 * @since 6.3.0
	 */
	arrayElement<T = string>(array?: ReadonlyArray<T>): T;
	/**
	 * Returns a subset with random elements of the given array in random order.
	 *
	 * @template T The type of the entries to pick from.
	 * @param array Array to pick the value from.
	 * @param count Number of elements to pick.
	 *    When not provided, random number of elements will be picked.
	 *    When value exceeds array boundaries, it will be limited to stay inside.
	 *
	 * @example
	 * faker.helpers.arrayElements(['cat', 'dog', 'mouse']) // ['mouse', 'cat']
	 * faker.helpers.arrayElements([1, 2, 3, 4, 5], 2) // [4, 2]
	 *
	 * @since 6.3.0
	 */
	arrayElements<T>(array?: ReadonlyArray<T>, count?: number): T[];
	/**
	 * Generator for combining faker methods based on a static string input.
	 *
	 * Note: We recommend using string template literals instead of `fake()`,
	 * which are faster and strongly typed (if you are using TypeScript),
	 * e.g. ``const address = `${faker.address.zipCode()} ${faker.address.city()}`;``
	 *
	 * This method is useful if you have to build a random string from a static, non-executable source
	 * (e.g. string coming from a user, stored in a database or a file).
	 *
	 * It checks the given string for placeholders and replaces them by calling faker methods:
	 *
	 * ```js
	 * const hello = faker.helpers.fake('Hi, my name is {{name.firstName}} {{name.lastName}}!')
	 * ```
	 *
	 * This would use the `faker.name.firstName()` and `faker.name.lastName()` method to resolve the placeholders respectively.
	 *
	 * It is also possible to provide parameters. At first, they will be parsed as json,
	 * and if that isn't possible, we will fall back to string:
	 *
	 * ```js
	 * const message = faker.helpers.fake(`You can call me at {{phone.number(+!# !## #### #####!)}}.')
	 * ```
	 *
	 * Currently it is not possible to set more than a single parameter.
	 *
	 * It is also NOT possible to use any non-faker methods or plain javascript in such templates.
	 *
	 * @param str The template string that will get interpolated. Must not be empty.
	 *
	 * @see faker.helpers.mustache() to use custom functions for resolution.
	 *
	 * @example
	 * faker.helpers.fake('{{name.lastName}}') // 'Barrows'
	 * faker.helpers.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}') // 'Durgan, Noe MD'
	 * faker.helpers.fake('This is static test.') // 'This is static test.'
	 * faker.helpers.fake('Good Morning {{name.firstName}}!') // 'Good Morning Estelle!'
	 * faker.helpers.fake('You can call me at {{phone.number(!## ### #####!)}}.') // 'You can call me at 202 555 973722.'
	 * faker.helpers.fake('I flipped the coin and got: {{helpers.arrayElement(["heads", "tails"])}}') // 'I flipped the coin and got: tails'
	 *
	 * @since 7.4.0
	 */
	fake(str: string): string;
	/**
	 * Generates a unique result using the results of the given method.
	 * Used unique entries will be stored internally and filtered from subsequent calls.
	 *
	 * @template Method The type of the method to execute.
	 * @param method The method used to generate the values.
	 * @param args The arguments used to call the method.
	 * @param options The optional options used to configure this method.
	 * @param options.startTime This parameter does nothing.
	 * @param options.maxTime The time in milliseconds this method may take before throwing an error. Defaults to `50`.
	 * @param options.maxRetries The total number of attempts to try before throwing an error. Defaults to `50`.
	 * @param options.currentIterations This parameter does nothing.
	 * @param options.exclude The value or values that should be excluded/skipped. Defaults to `[]`.
	 * @param options.compare The function used to determine whether a value was already returned. Defaults to check the existence of the key.
	 * @param options.store The store of unique entries. Defaults to a global store.
	 *
	 * @example
	 * faker.helpers.unique(faker.name.firstName) // 'Corbin'
	 *
	 * @since 7.5.0
	 */
	unique<Method extends (...parameters: any[]) => RecordKey>(method: Method, args?: Parameters<Method>, options?: {
		startTime?: number;
		maxTime?: number;
		maxRetries?: number;
		currentIterations?: number;
		exclude?: RecordKey | RecordKey[];
		compare?: (obj: Record<RecordKey, RecordKey>, key: RecordKey) => 0 | -1;
		store?: Record<RecordKey, RecordKey>;
	}): ReturnType<Method>;
}
declare class LoremPicsum {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates a new picsum image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param grayscale Whether to return a grayscale image. Default to `false`.
	 * @param blur The optional level of blur to apply. Supports `1` - `10`.
	 */
	image(width?: number, height?: number, grayscale?: boolean, blur?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10): string;
	/**
	 * Generates a new picsum image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param grayscale Whether to return a grayscale image. Default to `false`.
	 */
	imageGrayscale(width?: number, height?: number, grayscale?: boolean): string;
	/**
	 * Generates a new picsum image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param blur The optional level of blur to apply. Supports `1` - `10`.
	 */
	imageBlurred(width?: number, height?: number, blur?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10): string;
	/**
	 * Generates a new picsum image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param grayscale Whether to return a grayscale image. Default to `false`.
	 * @param blur The optional level of blur to apply. Supports `1` - `10`.
	 * @param seed The optional seed to use.
	 */
	imageRandomSeeded(width?: number, height?: number, grayscale?: boolean, blur?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10, seed?: string): string;
	/**
	 * Returns a random avatar url.
	 *
	 * @see faker.internet.avatar()
	 *
	 * @example
	 * faker.internet.avatar()
	 * // 'https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/315.jpg'
	 *
	 * @deprecated
	 */
	avatar(): string;
	/**
	 * Generates a new picsum image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param grayscale Whether to return a grayscale image. Default to `false`.
	 * @param blur The optional level of blur to apply. Supports `1` - `10`.
	 * @param seed The optional seed to use.
	 */
	imageUrl(width?: number, height?: number, grayscale?: boolean, blur?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10, seed?: string): string;
}
declare class Lorempixel {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates a new lorempixel image url for a random supported category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	image(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Returns a random avatar url.
	 *
	 * @see faker.internet.avatar()
	 *
	 * @example
	 * faker.internet.avatar()
	 * // 'https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/315.jpg'
	 *
	 * @deprecated
	 */
	avatar(): string;
	/**
	 * Generates a new lorempixel image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param category The category of the image to generate.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	imageUrl(width?: number, height?: number, category?: string, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "abstract" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	abstract(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "animals" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	animals(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "business" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	business(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "cats" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	cats(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "city" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	city(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "food" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	food(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "nightlife" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	nightlife(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "fashion" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	fashion(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "people" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	people(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "nature" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	nature(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "sports" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	sports(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "technics" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	technics(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a new lorempixel image url using the "transport" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to append a seed to the url. Defaults to `false`.
	 */
	transport(width?: number, height?: number, randomize?: boolean): string;
}
declare class Placeholder {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates a new placeholder image url.
	 *
	 * @param width The width of the image (in pixels). Defaults to `640`.
	 * @param height The height of the image (in pixels). Defaults to `width`.
	 * @param text The text of the image.
	 * @param format The file format of the image. Supports `png`, `jpeg`, `png`, `gif`, `webp`.
	 * @param backgroundColor The background color of the placeholder. Supports HEX CODE format.
	 * @param textColor The text color of the placeholder. Requires `backgroundColor`. Supports HEX CODE format.
	 *
	 * @example
	 * faker.image.placeholder.imageUrl() // https://via.placeholder.com/640x640
	 * faker.image.placeholder.imageUrl(200) // https://via.placeholder.com/200x200
	 * faker.image.placeholder.imageUrl(200, 100) // https://via.placeholder.com/200x100
	 * faker.image.placeholder.imageUrl(200, 100, 'Fish') // https://via.placeholder.com/200x100?text=Fish
	 * faker.image.placeholder.imageUrl(200, 100, 'Fish', 'webp') // https://via.placeholder.com/200x100.webp?text=Fish
	 * faker.image.placeholder.imageUrl(200, 100, 'Fish', 'webp') // https://via.placeholder.com/200x100.webp?text=Fish
	 * faker.image.placeholder.imageUrl(200, 100, 'Fish', 'webp', '000000', 'ffffff) // https://via.placeholder.com/200x100/000000/FFFFFF.webp?text=Fish
	 *
	 */
	imageUrl(width?: number, height?: number, text?: string, format?: "png" | "jpeg" | "jpg" | "gif" | "webp", backgroundColor?: string, textColor?: string): string;
	/**
	 * Generate a new placeholder image with random colors and text.
	 *
	 * @param width The width of the image (in pixels). Defaults to `640`.
	 * @param height The height of the image (in pixels). Defaults to `width`.
	 * @param format The file format of the image. Supports `png` `jpeg` `png` `gif` `webp`.
	 *
	 * @example
	 * faker.image.placeholder.randomUrl() // https://via.placeholder.com/640x640/000000/ffffff?text=lorum
	 * faker.image.placeholder.randomUrl(150) // https://via.placeholder.com/150x150/000000/ffffff?text=lorum
	 * faker.image.placeholder.randomUrl(150, 200) // https://via.placeholder.com/150x200/000000/ffffff?text=lorum
	 * faker.image.placeholder.randomUrl(150, 200, 'png') // https://via.placeholder.com/150x200/000000/ffffff.png?text=lorum
	 */
	randomUrl(width?: number, height?: number, format?: "png" | "jpeg" | "jpg" | "gif" | "webp"): string;
}
declare class Unsplash {
	private readonly faker;
	/**
	 * Gets the list of supported unsplash categories.
	 *
	 * @deprecated
	 */
	get categories(): string[];
	constructor(faker: Faker);
	/**
	 * Generates a new unsplash image url for a random supported category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param keyword The image keywords to use.
	 */
	image(width?: number, height?: number, keyword?: string): string;
	/**
	 * Returns a random avatar url.
	 *
	 * @see faker.internet.avatar()
	 *
	 * @example
	 * faker.internet.avatar()
	 * // 'https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/315.jpg'
	 *
	 * @deprecated
	 */
	avatar(): string;
	/**
	 * Generates a new unsplash image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param category The category of the image to generate.
	 * @param keyword The image keywords to use.
	 */
	imageUrl(width?: number, height?: number, category?: string, keyword?: string): string;
	/**
	 * Generates a new unsplash image url using the "food" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param keyword The image keywords to use.
	 */
	food(width?: number, height?: number, keyword?: string): string;
	/**
	 * Generates a new unsplash image url using the "people" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param keyword The image keywords to use.
	 */
	people(width?: number, height?: number, keyword?: string): string;
	/**
	 * Generates a new unsplash image url using the "nature" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param keyword The image keywords to use.
	 */
	nature(width?: number, height?: number, keyword?: string): string;
	/**
	 * Generates a new unsplash image url using the "technology" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param keyword The image keywords to use.
	 */
	technology(width?: number, height?: number, keyword?: string): string;
	/**
	 * Generates a new unsplash image url using the "objects" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param keyword The image keywords to use.
	 */
	objects(width?: number, height?: number, keyword?: string): string;
	/**
	 * Generates a new unsplash image url using the "buildings" category.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param keyword The image keywords to use.
	 */
	buildings(width?: number, height?: number, keyword?: string): string;
}
/**
 * Module to generate placeholder images.
 *
 * Default provider is unsplash image provider.
 */
export declare class ImageModule {
	private readonly faker;
	readonly lorempixel: Lorempixel;
	readonly unsplash: Unsplash;
	readonly lorempicsum: LoremPicsum;
	readonly placeholder: Placeholder;
	constructor(faker: Faker);
	/**
	 * Generates a random image url from one of the supported categories.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.image() // 'https://loremflickr.com/640/480/city'
	 * faker.image.image(1234, 2345) // 'https://loremflickr.com/1234/2345/sports'
	 * faker.image.image(1234, 2345, true) // 'https://loremflickr.com/1234/2345/nature?lock=56789'
	 *
	 * @since 2.0.1
	 */
	image(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random avatar image url.
	 *
	 * @example
	 * faker.image.avatar()
	 * // 'https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/170.jpg'
	 *
	 * @since 2.0.1
	 */
	avatar(): string;
	/**
	 * Generates a random image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param category The category of the image. By default, a random one will be selected.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.imageUrl() // 'https://loremflickr.com/640/480'
	 * faker.image.imageUrl(1234, 2345) // 'https://loremflickr.com/1234/2345'
	 * faker.image.imageUrl(1234, 2345, 'cat') // 'https://loremflickr.com/1234/2345/cat'
	 * faker.image.imageUrl(1234, 2345, 'cat', true) // 'https://loremflickr.com/1234/2345/cat?lock=6849'
	 *
	 * @since 2.0.1
	 */
	imageUrl(width?: number, height?: number, category?: string, randomize?: boolean): string;
	/**
	 * Generates a random abstract image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.abstract() // 'https://loremflickr.com/640/480/abstract'
	 * faker.image.abstract(1234, 2345) // 'https://loremflickr.com/1234/2345/abstract'
	 * faker.image.abstract(1234, 2345, true) // 'https://loremflickr.com/1234/2345/abstract?lock=56789'
	 *
	 * @since 2.0.1
	 */
	abstract(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random animal image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.animals() // 'https://loremflickr.com/640/480/animals'
	 * faker.image.animals(1234, 2345) // 'https://loremflickr.com/1234/2345/animals'
	 * faker.image.animals(1234, 2345, true) // 'https://loremflickr.com/1234/2345/animals?lock=56789'
	 *
	 * @since 2.0.1
	 */
	animals(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random business image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.business() // 'https://loremflickr.com/640/480/business'
	 * faker.image.business(1234, 2345) // 'https://loremflickr.com/1234/2345/business'
	 * faker.image.business(1234, 2345, true) // 'https://loremflickr.com/1234/2345/business?lock=56789'
	 *
	 * @since 2.0.1
	 */
	business(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random cat image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.cats() // 'https://loremflickr.com/640/480/cats'
	 * faker.image.cats(1234, 2345) // 'https://loremflickr.com/1234/2345/cats'
	 * faker.image.cats(1234, 2345, true) // 'https://loremflickr.com/1234/2345/cats?lock=56789'
	 *
	 * @since 2.0.1
	 */
	cats(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random city image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.city() // 'https://loremflickr.com/640/480/city'
	 * faker.image.city(1234, 2345) // 'https://loremflickr.com/1234/2345/city'
	 * faker.image.city(1234, 2345, true) // 'https://loremflickr.com/1234/2345/city?lock=56789'
	 *
	 * @since 2.0.1
	 */
	city(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random food image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.food() // 'https://loremflickr.com/640/480/food'
	 * faker.image.food(1234, 2345) // 'https://loremflickr.com/1234/2345/food'
	 * faker.image.food(1234, 2345, true) // 'https://loremflickr.com/1234/2345/food?lock=56789'
	 *
	 * @since 2.0.1
	 */
	food(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random nightlife image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.nightlife() // 'https://loremflickr.com/640/480/nightlife'
	 * faker.image.nightlife(1234, 2345) // 'https://loremflickr.com/1234/2345/nightlife'
	 * faker.image.nightlife(1234, 2345, true) // 'https://loremflickr.com/1234/2345/nightlife?lock=56789'
	 *
	 * @since 2.0.1
	 */
	nightlife(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random fashion image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.fashion() // 'https://loremflickr.com/640/480/fashion'
	 * faker.image.fashion(1234, 2345) // 'https://loremflickr.com/1234/2345/fashion'
	 * faker.image.fashion(1234, 2345, true) // 'https://loremflickr.com/1234/2345/fashion?lock=56789'
	 *
	 * @since 2.0.1
	 */
	fashion(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random people image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.people() // 'https://loremflickr.com/640/480/people'
	 * faker.image.people(1234, 2345) // 'https://loremflickr.com/1234/2345/people'
	 * faker.image.people(1234, 2345, true) // 'https://loremflickr.com/1234/2345/people?lock=56789'
	 *
	 * @since 2.0.1
	 */
	people(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random nature image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.nature() // 'https://loremflickr.com/640/480/nature'
	 * faker.image.nature(1234, 2345) // 'https://loremflickr.com/1234/2345/nature'
	 * faker.image.nature(1234, 2345, true) // 'https://loremflickr.com/1234/2345/nature?lock=56789'
	 *
	 * @since 2.0.1
	 */
	nature(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random sports image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.sports() // 'https://loremflickr.com/640/480/sports'
	 * faker.image.sports(1234, 2345) // 'https://loremflickr.com/1234/2345/sports'
	 * faker.image.sports(1234, 2345, true) // 'https://loremflickr.com/1234/2345/sports?lock=56789'
	 *
	 * @since 2.0.1
	 */
	sports(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random technics image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.technics() // 'https://loremflickr.com/640/480/technics'
	 * faker.image.technics(1234, 2345) // 'https://loremflickr.com/1234/2345/technics'
	 * faker.image.technics(1234, 2345, true) // 'https://loremflickr.com/1234/2345/technics?lock=56789'
	 *
	 * @since 2.0.1
	 */
	technics(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random transport image url.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param randomize Whether to randomize the image or not. Defaults to `false`.
	 *
	 * @example
	 * faker.image.transport() // 'https://loremflickr.com/640/480/transport'
	 * faker.image.transport(1234, 2345) // 'https://loremflickr.com/1234/2345/transport'
	 * faker.image.transport(1234, 2345, true) // 'https://loremflickr.com/1234/2345/transport?lock=56789'
	 *
	 * @since 2.0.1
	 */
	transport(width?: number, height?: number, randomize?: boolean): string;
	/**
	 * Generates a random data uri containing an svg image.
	 *
	 * @param width The width of the image. Defaults to `640`.
	 * @param height The height of the image. Defaults to `480`.
	 * @param color The color to use. Defaults to `grey`.
	 *
	 * @example
	 * faker.image.dataUri() // 'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http...'
	 *
	 * @since 4.0.0
	 */
	dataUri(width?: number, height?: number, color?: string): string;
}
/**
 * Module to generate random texts and words.
 */
export declare class LoremModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates a word of a specified length.
	 *
	 * @param options The expected length of the word or the options to use.
	 * @param options.length The expected length of the word.
	 * @param options.strategy The strategy to apply when no words with a matching length are found.
	 *
	 * Available error handling strategies:
	 *
	 * - `fail`: Throws an error if no words with the given length are found.
	 * - `shortest`: Returns any of the shortest words.
	 * - `closest`: Returns any of the words closest to the given length.
	 * - `longest`: Returns any of the longest words.
	 * - `any-length`: Returns a word with any length.
	 *
	 * Defaults to `'any-length'`.
	 *
	 * @example
	 * faker.lorem.word() // 'temporibus'
	 * faker.lorem.word(5) // 'velit'
	 * faker.lorem.word({ strategy: 'shortest' }) // 'a'
	 * faker.lorem.word({ length: { min: 5, max: 7 }, strategy: "fail" }) // 'quaerat'
	 *
	 * @since 3.1.0
	 */
	word(options?: number | {
		length?: number | {
			min: number;
			max: number;
		};
		strategy?: "fail" | "closest" | "shortest" | "longest" | "any-length";
	}): string;
	/**
	 * Generates a space separated list of words.
	 *
	 * @param num The number of words to generate. Defaults to `3`.
	 *
	 * @example
	 * faker.lorem.words() // 'qui praesentium pariatur'
	 * faker.lorem.words(10) // 'debitis consectetur voluptatem non doloremque ipsum autem totam eum ratione'
	 *
	 * @since 2.0.1
	 */
	words(num?: number): string;
	/**
	 * Generates a space separated list of words beginning a capital letter and ending with a dot.
	 *
	 * @param wordCount The number of words, that should be in the sentence. Defaults to a random number between `3` and `10`.
	 *
	 * @example
	 * faker.lorem.sentence() // 'Voluptatum cupiditate suscipit autem eveniet aut dolorem aut officiis distinctio.'
	 * faker.lorem.sentence(5) // 'Laborum voluptatem officiis est et.'
	 *
	 * @since 2.0.1
	 */
	sentence(wordCount?: number): string;
	/**
	 * Generates a slugified text consisting of the given number of hyphen separated words.
	 *
	 * @param wordCount The number of words to generate. Defaults to `3`.
	 *
	 * @example
	 * faker.lorem.slug() // 'dolores-illo-est'
	 *
	 * @since 4.0.0
	 */
	slug(wordCount?: number): string;
	/**
	 * Generates the given number of sentences.
	 *
	 * @param sentenceCount The number of sentences to generate. Defaults to a random number between `2` and `6`.
	 * @param separator The separator to add between sentences. Defaults to `' '`.
	 *
	 * @example
	 * faker.lorem.sentences() // 'Iste molestiae incidunt aliquam possimus reprehenderit eum corrupti. Deleniti modi voluptatem nostrum ut esse.'
	 * faker.lorem.sentences(2) // 'Maxime vel numquam quibusdam. Dignissimos ex molestias quos aut molestiae quam nihil occaecati maiores.'
	 * faker.lorem.sentences(2, '\n')
	 * // 'Et rerum a unde tempora magnam sit nisi.
	 * // Et perspiciatis ipsam omnis.'
	 *
	 * @since 2.0.1
	 */
	sentences(sentenceCount?: number, separator?: string): string;
	/**
	 * Generates a paragraph with at least the given number of sentences.
	 *
	 * @param sentenceCount The minim number of sentences to generate. Defaults to `3`.
	 *
	 * @example
	 * faker.lorem.paragraph() // 'Non architecto nam unde sint. Ex tenetur dolor facere optio aut consequatur. Ea laudantium reiciendis repellendus.'
	 * faker.lorem.paragraph() // 'Animi possimus nemo consequuntur ut ea et tempore unde qui. Quis corporis esse occaecati.'
	 *
	 * @since 2.0.1
	 */
	paragraph(sentenceCount?: number): string;
	/**
	 * Generates the given number of paragraphs.
	 *
	 * @param paragraphCount The number of paragraphs to generate. Defaults to `3`.
	 * @param separator The separator to use. Defaults to `'\n'`.
	 *
	 * @example
	 * faker.lorem.paragraphs()
	 * // 'Beatae voluptatem dicta et assumenda fugit eaque quidem consequatur. Fuga unde provident. Id reprehenderit soluta facilis est laborum laborum. Illum aut non ut. Est nulla rem ipsa.
	 * // Voluptatibus quo pariatur est. Temporibus deleniti occaecati pariatur nemo est molestias voluptas. Doloribus commodi et et exercitationem vel et. Omnis inventore cum aut amet.
	 * // Sapiente deleniti et. Ducimus maiores eum. Rem dolorem itaque aliquam.'
	 *
	 * faker.lorem.paragraphs(5)
	 * // 'Quia hic sunt ducimus expedita quo impedit soluta. Quam impedit et ipsum optio. Unde dolores nulla nobis vero et aspernatur officiis.
	 * // Aliquam dolorem temporibus dolores voluptatem voluptatem qui nostrum quia. Sit hic facilis rerum eius. Beatae doloribus nesciunt iste ipsum.
	 * // Natus nam eum nulla voluptas molestiae fuga libero nihil voluptatibus. Sed quam numquam eum ipsam temporibus eaque ut et. Enim quas debitis quasi quis. Vitae et vitae.
	 * // Repellat voluptatem est laborum illo harum sed reprehenderit aut. Quo sit et. Exercitationem blanditiis totam velit ad dicta placeat.
	 * // Rerum non eum incidunt amet quo. Eaque laborum ut. Recusandae illo ab distinctio veritatis. Cum quis architecto ad maxime a.'
	 *
	 * faker.lorem.paragraphs(2, '<br/>\n')
	 * // 'Eos magnam aut qui accusamus. Sapiente quas culpa totam excepturi. Blanditiis totam distinctio occaecati dignissimos cumque atque qui officiis.<br/>
	 * // Nihil quis vel consequatur. Blanditiis commodi deserunt sunt animi dolorum. A optio porro hic dolorum fugit aut et sint voluptas. Minima ad sed ipsa est non dolores.'
	 *
	 * @since 2.0.1
	 */
	paragraphs(paragraphCount?: number, separator?: string): string;
	/**
	 * Generates a random text based on a random lorem method.
	 *
	 * @example
	 * faker.lorem.text() // 'Doloribus autem non quis vero quia.'
	 * faker.lorem.text()
	 * // 'Rerum eum reiciendis id ipsa hic dolore aut laborum provident.
	 * // Quis beatae quis corporis veritatis corrupti ratione delectus sapiente ut.
	 * // Quis ut dolor dolores facilis possimus tempore voluptates.
	 * // Iure nam officia optio cumque.
	 * // Dolor tempora iusto.'
	 *
	 * @since 3.1.0
	 */
	text(): string;
	/**
	 * Generates the given number lines of lorem separated by `'\n'`.
	 *
	 * @param lineCount The number of lines to generate. Defaults to a random number between `1` and `5`.
	 *
	 * @example
	 * faker.lorem.lines()
	 * // 'Rerum quia aliquam pariatur explicabo sint minima eos.
	 * // Voluptatem repellat consequatur deleniti qui quibusdam harum cumque.
	 * // Enim eveniet a qui.
	 * // Consectetur velit eligendi animi nostrum veritatis.'
	 *
	 * faker.lorem.lines()
	 * // 'Soluta deserunt eos quam reiciendis libero autem enim nam ut.
	 * // Voluptate aut aut.'
	 *
	 * @since 3.1.0
	 */
	lines(lineCount?: number): string;
}
/**
 * Module to generate seed based random numbers.
 *
 * @deprecated Internal. Use faker.datatype.number() or faker.seed() instead.
 */
export declare class MersenneModule {
	private gen;
	constructor();
	/**
	 * Generates a random number between `[min, max)`.
	 *
	 * @param max The maximum number. Defaults to `32768`.
	 * @param min The minimum number. Defaults to `0`.
	 *
	 * @example
	 * faker.mersenne.rand() // 15515
	 * faker.mersenne.rand(1000, 500) // 578
	 *
	 * @since 5.5.0
	 */
	rand(max?: number, min?: number): number;
	/**
	 * Sets the seed to use.
	 *
	 * @param S The seed to use.
	 * @throws If the seed is not a `number`.
	 *
	 * @since 5.5.0
	 */
	seed(S: number): void;
	/**
	 * Sets the seed to use.
	 *
	 * @param A The seed to use.
	 * @throws If the seed is not a `number[]`.
	 *
	 * @since 5.5.0
	 */
	seed_array(A: number[]): void;
}
/**
 * Module to generate music related entries.
 */
export declare class MusicModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random music genre.
	 *
	 * @example
	 * faker.music.genre() // 'Reggae'
	 *
	 * @since 5.2.0
	 */
	genre(): string;
	/**
	 * Returns a random song name.
	 *
	 * @example
	 * faker.music.songName() // 'White Christmas'
	 *
	 * @since 7.1.0
	 */
	songName(): string;
}
/**
 * @deprecated Use Sex enum instead.
 */
export declare enum Gender {
	female = "female",
	male = "male"
}
/**
 * @deprecated Use SexType instead.
 */
export declare type GenderType = SexType;
export declare enum Sex {
	Female = "female",
	Male = "male"
}
export declare type SexType = `${Sex}`;
/**
 * Module to generate people's names and titles.
 */
export declare class NameModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random first name.
	 *
	 * @param sex The optional sex to use.
	 * Can be either `'female'` or `'male'`.
	 *
	 * @example
	 * faker.name.firstName() // 'Antwan'
	 * faker.name.firstName('female') // 'Victoria'
	 * faker.name.firstName('male') // 'Tom'
	 *
	 * @since 2.0.1
	 */
	firstName(sex?: SexType): string;
	/**
	 * Returns a random last name.
	 *
	 * @param sex The optional sex to use.
	 * Can be either `'female'` or `'male'`.
	 *
	 * @example
	 * faker.name.lastName() // 'Hauck'
	 * faker.name.lastName('female') // 'Grady'
	 * faker.name.lastName('male') // 'Barton'
	 *
	 * @since 2.0.1
	 */
	lastName(sex?: SexType): string;
	/**
	 * Returns a random middle name.
	 *
	 * @param sex The optional sex to use.
	 * Can be either `'female'` or `'male'`.
	 *
	 * @example
	 * faker.name.middleName() // 'James'
	 * faker.name.middleName('female') // 'Eloise'
	 * faker.name.middleName('male') // 'Asher'
	 *
	 * @since 5.2.0
	 */
	middleName(sex?: SexType): string;
	/**
	 * Generates a random full name.
	 *
	 * @param firstName The optional first name to use. If not specified a random one will be chosen.
	 * @param lastName The optional last name to use. If not specified a random one will be chosen.
	 * @param sex The optional sex to use. Can be either `'female'` or `'male'`.
	 *
	 * @see faker.name.fullName()
	 *
	 * @example
	 * faker.name.findName() // 'Allen Brown'
	 * faker.name.findName('Joann') // 'Joann Osinski'
	 * faker.name.findName('Marcella', '', 'female') // 'Mrs. Marcella Huels'
	 * faker.name.findName(undefined, 'Beer') // 'Mr. Alfonso Beer'
	 * faker.name.findName(undefined, undefined, 'male') // 'Fernando Schaefer'
	 *
	 * @since 2.0.1
	 *
	 * @deprecated Use faker.name.fullName() instead.
	 */
	findName(firstName?: string, lastName?: string, sex?: SexType): string;
	/**
	 * Generates a random full name.
	 *
	 * @param options An options object. Defaults to `{}`.
	 * @param options.firstName The optional first name to use. If not specified a random one will be chosen.
	 * @param options.lastName The optional last name to use. If not specified a random one will be chosen.
	 * @param options.sex The optional sex to use. Can be either `'female'` or `'male'`.
	 * @param options.gender Deprecated. Use `sex` instead.
	 *
	 * @example
	 * faker.name.fullName() // 'Allen Brown'
	 * faker.name.fullName({ firstName: 'Joann' }) // 'Joann Osinski'
	 * faker.name.fullName({ firstName: 'Marcella', sex: 'female' }) // 'Mrs. Marcella Huels'
	 * faker.name.fullName({ lastName: 'Beer' }) // 'Mr. Alfonso Beer'
	 * faker.name.fullName({ sex: 'male' }) // 'Fernando Schaefer'
	 *
	 * @since 7.4.0
	 */
	fullName(options?: {
		firstName?: string;
		lastName?: string;
		gender?: GenderType;
		sex?: SexType;
	}): string;
	/**
	 * Returns a random gender.
	 *
	 * @param binary (deprecated) Whether to return only binary gender names. Defaults to `false`.
	 *
	 * @see faker.name.sex() if you would like to generate binary-gender value
	 *
	 * @example
	 * faker.name.gender() // 'Trans*Man'
	 *
	 * @since 5.0.0
	 */
	gender(binary?: boolean): string;
	/**
	 * Returns a random sex.
	 *
	 * Output of this method is localised, so it should not be used to fill the parameter `sex`
	 * available in some other modules for example `faker.name.firstName()`.
	 *
	 * @see faker.name.gender() if you would like to generate gender related values.
	 *
	 * @example
	 * faker.name.sex() // 'female'
	 *
	 * @since 7.5.0
	 */
	sex(): string;
	/**
	 * Returns a random sex type.
	 *
	 * @example
	 * faker.name.sexType() // Sex.Female
	 *
	 * @since 7.5.0
	 */
	sexType(): SexType;
	/**
	 * Returns a random name prefix.
	 *
	 * @param sex The optional sex to use. Can be either `'female'` or `'male'`.
	 *
	 * @example
	 * faker.name.prefix() // 'Miss'
	 * faker.name.prefix('female') // 'Ms.'
	 * faker.name.prefix('male') // 'Mr.'
	 *
	 * @since 2.0.1
	 */
	prefix(sex?: SexType): string;
	/**
	 * Returns a random name suffix.
	 *
	 * @example
	 * faker.name.suffix() // 'DDS'
	 *
	 * @since 2.0.1
	 */
	suffix(): string;
	/**
	 * Generates a random job title.
	 *
	 * @example
	 * faker.name.jobTitle() // 'Global Accounts Engineer'
	 *
	 * @since 3.0.0
	 */
	jobTitle(): string;
	/**
	 * Generates a random job descriptor.
	 *
	 * @example
	 * faker.name.jobDescriptor() // 'Customer'
	 *
	 * @since 3.0.0
	 */
	jobDescriptor(): string;
	/**
	 * Generates a random job area.
	 *
	 * @example
	 * faker.name.jobArea() // 'Brand'
	 *
	 * @since 3.0.0
	 */
	jobArea(): string;
	/**
	 * Generates a random job type.
	 *
	 * @example
	 * faker.name.jobType() // 'Assistant'
	 *
	 * @since 3.0.0
	 */
	jobType(): string;
}
/**
 * Module to generate phone-related data.
 */
export declare class PhoneModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates a random phone number.
	 *
	 * @param format Format of the phone number. Defaults to a random phone number format.
	 *
	 * @see faker.phone.number()
	 *
	 * @example
	 * faker.phone.phoneNumber() // '961-770-7727'
	 * faker.phone.phoneNumber('501-###-###') // '501-039-841'
	 * faker.phone.phoneNumber('+48 91 ### ## ##') // '+48 91 463 61 70'
	 *
	 * @since 2.0.1
	 *
	 * @deprecated Use faker.phone.number() instead.
	 */
	phoneNumber(format?: string): string;
	/**
	 * Generates a random phone number.
	 *
	 * @param format Format of the phone number. Defaults to a random phone number format.
	 *
	 * @example
	 * faker.phone.number() // '961-770-7727'
	 * faker.phone.number('501-###-###') // '501-039-841'
	 * faker.phone.number('+48 91 ### ## ##') // '+48 91 463 61 70'
	 *
	 * @since 7.3.0
	 */
	number(format?: string): string;
	/**
	 * Returns phone number in a format of the given index from `faker.definitions.phone_number.formats`.
	 *
	 * @param phoneFormatsArrayIndex Index in the `faker.definitions.phone_number.formats` array. Defaults to `0`.
	 *
	 * @see faker.phone.phoneNumber()
	 * @see faker.helpers.replaceSymbolWithNumber()
	 *
	 * @example
	 * faker.phone.phoneNumberFormat() // '943-627-0355'
	 * faker.phone.phoneNumberFormat(3) // '282.652.3201'
	 *
	 * @since 2.0.1
	 *
	 * @deprecated
	 * Use faker.phone.phoneNumber() instead.
	 */
	phoneNumberFormat(phoneFormatsArrayIndex?: number): string;
	/**
	 * Returns a random phone number format.
	 *
	 * @see faker.phone.phoneNumber()
	 * @see faker.definitions.phone_number.formats()
	 *
	 * @example
	 * faker.phone.phoneFormats() // '!##.!##.####'
	 *
	 * @since 2.0.1
	 *
	 * @deprecated
	 * Use `faker.phone.phoneNumber()` instead.
	 */
	phoneFormats(): string;
	/**
	 * Generates IMEI number.
	 *
	 * @example
	 * faker.phone.imei() // '13-850175-913761-7'
	 *
	 * @since 6.2.0
	 */
	imei(): string;
}
/**
 * Type that provides auto-suggestions but also any string.
 *
 * @see https://github.com/microsoft/TypeScript/issues/29729#issuecomment-471566609
 */
export declare type LiteralUnion<T extends U, U = string> = T | (U & {
	zz_IGNORE_ME?: never;
});
export declare type LowerAlphaChar = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";
export declare type UpperAlphaChar = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";
export declare type NumericChar = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
export declare type AlphaChar = LowerAlphaChar | UpperAlphaChar;
export declare type AlphaNumericChar = AlphaChar | NumericChar;
/**
 * Generates random values of different kinds.
 */
export declare class RandomModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns random word.
	 *
	 * @example
	 * faker.random.word() // 'Seamless'
	 *
	 * @since 3.1.0
	 */
	word(): string;
	/**
	 * Returns string with set of random words.
	 *
	 * @param count Number of words. Defaults to a random value between `1` and `3`.
	 *
	 * @example
	 * faker.random.words() // 'neural'
	 * faker.random.words(5) // 'copy Handcrafted bus client-server Point'
	 *
	 * @since 3.1.0
	 */
	words(count?: number): string;
	/**
	 * Returns a random locale, that is available in this faker instance.
	 * You can use the returned locale with `faker.setLocale(result)`.
	 *
	 * @example
	 * faker.random.locale() // 'el'
	 *
	 * @since 3.1.0
	 */
	locale(): string;
	/**
	 * Generating a string consisting of letters in the English alphabet.
	 *
	 * @param options Either the number of characters or an options instance. Defaults to `{ count: 1, casing: 'lower', bannedChars: [] }`.
	 * @param options.count The number of characters to generate. Defaults to `1`.
	 * @param options.casing The casing of the characters. Defaults to `'lower'`.
	 * @param options.upcase Deprecated, use `casing: 'upper'` instead.
	 * @param options.bannedChars An array with characters to exclude. Defaults to `[]`.
	 *
	 * @example
	 * faker.random.alpha() // 'b'
	 * faker.random.alpha(10) // 'qccrabobaf'
	 * faker.random.alpha({ count: 5, casing: 'upper', bannedChars: ['A'] }) // 'DTCIC'
	 *
	 * @since 5.0.0
	 */
	alpha(options?: number | {
		count?: number;
		/**
		 * @deprecated Use `casing` instead.
		 */
		upcase?: boolean;
		casing?: Casing;
		bannedChars?: readonly LiteralUnion<AlphaChar>[] | string;
	}): string;
	/**
	 * Generating a string consisting of alpha characters and digits.
	 *
	 * @param count The number of characters and digits to generate. Defaults to `1`.
	 * @param options The options to use. Defaults to `{ bannedChars: [] }`.
	 * @param options.casing The casing of the characters. Defaults to `'lower'`.
	 * @param options.bannedChars An array of characters and digits which should be banned in the generated string. Defaults to `[]`.
	 *
	 * @example
	 * faker.random.alphaNumeric() // '2'
	 * faker.random.alphaNumeric(5) // '3e5v7'
	 * faker.random.alphaNumeric(5, { bannedChars: ["a"] }) // 'xszlm'
	 *
	 * @since 3.1.0
	 */
	alphaNumeric(count?: number, options?: {
		casing?: Casing;
		bannedChars?: readonly LiteralUnion<AlphaNumericChar>[] | string;
	}): string;
	/**
	 * Generates a given length string of digits.
	 *
	 * @param length The number of digits to generate. Defaults to `1`.
	 * @param options The options to use. Defaults to `{}`.
	 * @param options.allowLeadingZeros If true, leading zeros will be allowed. Defaults to `false`.
	 * @param options.bannedDigits An array of digits which should be banned in the generated string. Defaults to `[]`.
	 *
	 * @example
	 * faker.random.numeric() // '2'
	 * faker.random.numeric(5) // '31507'
	 * faker.random.numeric(42) // '56434563150765416546479875435481513188548'
	 * faker.random.numeric(42, { allowLeadingZeros: true }) // '00564846278453876543517840713421451546115'
	 * faker.random.numeric(6, { bannedDigits: ['0'] }) // '943228'
	 *
	 * @since 6.3.0
	 */
	numeric(length?: number, options?: {
		allowLeadingZeros?: boolean;
		bannedDigits?: readonly LiteralUnion<NumericChar>[] | string;
	}): string;
}
declare const commonInterfaceTypes: readonly [
	"en",
	"wl",
	"ww"
];
declare const commonInterfaceSchemas: {
	readonly index: "o";
	readonly slot: "s";
	readonly mac: "x";
	readonly pci: "p";
};
/**
 * Generates fake data for many computer systems properties.
 */
export declare class SystemModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random file name with extension.
	 *
	 * @param options An options object.
	 * @param options.extensionCount Define how many extensions the file name should have. A negative number will be treated as `0`. Defaults to `1`.
	 *
	 * @example
	 * faker.system.fileName() // 'self_enabling_accountability_toys.kpt'
	 * faker.system.fileName({ extensionCount: 2 }) // 'bike_table.res.vcs'
	 *
	 * @since 3.1.0
	 */
	fileName(options?: {
		/**
		 * Define how many extensions the file name should have. A negative number will be treated as `0`. Defaults to `1`.
		 */
		extensionCount?: number;
	}): string;
	/**
	 * Returns a random file name with a given extension or a commonly used extension.
	 *
	 * @param ext Extension. Empty string is considered to be not set.
	 * @example
	 * faker.system.commonFileName() // 'dollar.jpg'
	 * faker.system.commonFileName('txt') // 'global_borders_wyoming.txt'
	 *
	 * @since 3.1.0
	 */
	commonFileName(ext?: string): string;
	/**
	 * Returns a mime-type.
	 *
	 * @example
	 * faker.system.mimeType() // 'video/vnd.vivo'
	 *
	 * @since 3.1.0
	 */
	mimeType(): string;
	/**
	 * Returns a commonly used file type.
	 *
	 * @example
	 * faker.system.commonFileType() // 'audio'
	 *
	 * @since 3.1.0
	 */
	commonFileType(): string;
	/**
	 * Returns a commonly used file extension.
	 *
	 * @example
	 * faker.system.commonFileExt() // 'gif'
	 *
	 * @since 3.1.0
	 */
	commonFileExt(): string;
	/**
	 * Returns a file type.
	 *
	 * @example
	 * faker.system.fileType() // 'message'
	 *
	 * @since 3.1.0
	 */
	fileType(): string;
	/**
	 * Returns a file extension.
	 *
	 * @param mimeType Valid [mime-type](https://github.com/jshttp/mime-db/blob/master/db.json)
	 *
	 * @example
	 * faker.system.fileExt() // 'emf'
	 * faker.system.fileExt('application/json') // 'json'
	 *
	 * @since 3.1.0
	 */
	fileExt(mimeType?: string): string;
	/**
	 * Returns a directory path.
	 *
	 * @example
	 * faker.system.directoryPath() // '/etc/mail'
	 *
	 * @since 3.1.0
	 */
	directoryPath(): string;
	/**
	 * Returns a file path.
	 *
	 * @example
	 * faker.system.filePath() // '/usr/local/src/money.dotx'
	 *
	 * @since 3.1.0
	 */
	filePath(): string;
	/**
	 * Returns a [semantic version](https://semver.org).
	 *
	 * @example
	 * faker.system.semver() // '1.1.2'
	 *
	 * @since 3.1.0
	 */
	semver(): string;
	/**
	 * Returns a random [network interface](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/networking_guide/sec-understanding_the_predictable_network_interface_device_names).
	 *
	 * @param options The options to use. Defaults to `{}`.
	 * @param options.interfaceType The interface type. Can be one of `en`, `wl`, `ww`.
	 * @param options.interfaceSchema The interface schema. Can be one of `index`, `slot`, `mac`, `pci`.
	 *
	 * @example
	 * faker.system.networkInterface() // 'enp0s3'
	 * faker.system.networkInterface({ interfaceType: 'wl' }) // 'wlo1'
	 * faker.system.networkInterface({ interfaceSchema: 'mac' }) // 'enx000c29c00000'
	 * faker.system.networkInterface({ interfaceType: 'en', interfaceSchema: 'pci' }) // 'enp5s0f1d0'
	 *
	 * @since 7.4.0
	 */
	networkInterface(options?: {
		interfaceType?: typeof commonInterfaceTypes[number];
		interfaceSchema?: keyof typeof commonInterfaceSchemas;
	}): string;
	/**
	 * Returns a random cron expression.
	 *
	 * @param options The optional options to use.
	 * @param options.includeYear Whether to include a year in the generated expression. Defaults to `false`.
	 * @param options.includeNonStandard Whether to include a @yearly, @monthly, @daily, etc text labels in the generated expression. Defaults to `false`.
	 *
	 * @example
	 * faker.system.cron() // '45 23 * * 6'
	 * faker.system.cron({ includeYear: true }) // '45 23 * * 6 2067'
	 * faker.system.cron({ includeYear: false }) // '45 23 * * 6'
	 * faker.system.cron({ includeNonStandard: false }) // '45 23 * * 6'
	 * faker.system.cron({ includeNonStandard: true }) // '@yearly'
	 *
	 * @since 7.5.0
	 */
	cron(options?: {
		includeYear?: boolean;
		includeNonStandard?: boolean;
	}): string;
}
/**
 * Module to generate unique entries.
 *
 * @deprecated
 */
export declare class UniqueModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Generates a unique result using the results of the given method.
	 * Used unique entries will be stored internally and filtered from subsequent calls.
	 *
	 * @template Method The type of the method to execute.
	 * @param method The method used to generate the values.
	 * @param args The arguments used to call the method.
	 * @param options The optional options used to configure this method.
	 * @param options.startTime This parameter does nothing.
	 * @param options.maxTime The time in milliseconds this method may take before throwing an error. Defaults to `50`.
	 * @param options.maxRetries The total number of attempts to try before throwing an error. Defaults to `50`.
	 * @param options.currentIterations This parameter does nothing.
	 * @param options.exclude The value or values that should be excluded/skipped. Defaults to `[]`.
	 * @param options.compare The function used to determine whether a value was already returned. Defaults to check the existence of the key.
	 * @param options.store The store of unique entries. Defaults to a global store.
	 *
	 * @see faker.helpers.unique()
	 *
	 * @example
	 * faker.unique(faker.name.firstName) // 'Corbin'
	 *
	 * @since 5.0.0
	 *
	 * @deprecated Use faker.helpers.unique() instead.
	 */
	unique<Method extends (...parameters: any[]) => RecordKey>(method: Method, args?: Parameters<Method>, options?: {
		startTime?: number;
		maxTime?: number;
		maxRetries?: number;
		currentIterations?: number;
		exclude?: RecordKey | RecordKey[];
		compare?: (obj: Record<RecordKey, RecordKey>, key: RecordKey) => 0 | -1;
		store?: Record<RecordKey, RecordKey>;
	}): ReturnType<Method>;
}
/**
 * Module to generate vehicle related entries.
 */
export declare class VehicleModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns a random vehicle.
	 *
	 * @example
	 * faker.vehicle.vehicle() // 'BMW Explorer'
	 *
	 * @since 5.0.0
	 */
	vehicle(): string;
	/**
	 * Returns a manufacturer name.
	 *
	 * @example
	 * faker.vehicle.manufacturer() // 'Ford'
	 *
	 * @since 5.0.0
	 */
	manufacturer(): string;
	/**
	 * Returns a vehicle model.
	 *
	 * @example
	 * faker.vehicle.model() // 'Explorer'
	 *
	 * @since 5.0.0
	 */
	model(): string;
	/**
	 * Returns a vehicle type.
	 *
	 * @example
	 * faker.vehicle.type() // 'Coupe'
	 *
	 * @since 5.0.0
	 */
	type(): string;
	/**
	 * Returns a fuel type.
	 *
	 * @example
	 * faker.vehicle.fuel() // 'Electric'
	 *
	 * @since 5.0.0
	 */
	fuel(): string;
	/**
	 * Returns a vehicle identification number (VIN).
	 *
	 * @example
	 * faker.vehicle.vin() // 'YV1MH682762184654'
	 *
	 * @since 5.0.0
	 */
	vin(): string;
	/**
	 * Returns a vehicle color.
	 *
	 * @example
	 * faker.vehicle.color() // 'red'
	 *
	 * @since 5.0.0
	 */
	color(): string;
	/**
	 * Returns a vehicle registration number (Vehicle Registration Mark - VRM)
	 *
	 * @example
	 * faker.vehicle.vrm() // 'MF56UPA'
	 *
	 * @since 5.4.0
	 */
	vrm(): string;
	/**
	 * Returns a type of bicycle.
	 *
	 * @example
	 * faker.vehicle.bicycle() // 'Adventure Road Bicycle'
	 *
	 * @since 5.5.0
	 */
	bicycle(): string;
}
/**
 * Module to return various types of words.
 */
export declare class WordModule {
	private readonly faker;
	constructor(faker: Faker);
	/**
	 * Returns an adjective of random or optionally specified length.
	 *
	 * @param options The expected length of the word or the options to use.
	 * @param options.length The expected length of the word.
	 * @param options.strategy The strategy to apply when no words with a matching length are found.
	 *
	 * Available error handling strategies:
	 *
	 * - `fail`: Throws an error if no words with the given length are found.
	 * - `shortest`: Returns any of the shortest words.
	 * - `closest`: Returns any of the words closest to the given length.
	 * - `longest`: Returns any of the longest words.
	 * - `any-length`: Returns a word with any length.
	 *
	 * Defaults to `'any-length'`.
	 *
	 * @example
	 * faker.word.adjective() // 'pungent'
	 * faker.word.adjective(5) // 'slimy'
	 * faker.word.adjective(100) // 'complete'
	 * faker.word.adjective({ strategy: 'shortest' }) // 'icy'
	 * faker.word.adjective({ length: { min: 5, max: 7 }, strategy: "fail" }) // 'distant'
	 *
	 * @since 6.0.0
	 */
	adjective(options?: number | {
		length?: number | {
			min: number;
			max: number;
		};
		strategy?: "fail" | "closest" | "shortest" | "longest" | "any-length";
	}): string;
	/**
	 * Returns an adverb of random or optionally specified length.
	 *
	 * @param options The expected length of the word or the options to use.
	 * @param options.length The expected length of the word.
	 * @param options.strategy The strategy to apply when no words with a matching length are found.
	 *
	 * Available error handling strategies:
	 *
	 * - `fail`: Throws an error if no words with the given length are found.
	 * - `shortest`: Returns any of the shortest words.
	 * - `closest`: Returns any of the words closest to the given length.
	 * - `longest`: Returns any of the longest words.
	 * - `any-length`: Returns a word with any length.
	 *
	 * Defaults to `'any-length'`.
	 *
	 * @example
	 * faker.word.adverb() // 'quarrelsomely'
	 * faker.word.adverb(5) // 'madly'
	 * faker.word.adverb(100) // 'sadly'
	 * faker.word.adverb({ strategy: 'shortest' }) // 'too'
	 * faker.word.adverb({ length: { min: 5, max: 7 }, strategy: "fail" }) // 'sweetly'
	 *
	 * @since 6.0.0
	 */
	adverb(options?: number | {
		length?: number | {
			min: number;
			max: number;
		};
		strategy?: "fail" | "closest" | "shortest" | "longest" | "any-length";
	}): string;
	/**
	 * Returns a conjunction of random or optionally specified length.
	 *
	 * @param options The expected length of the word or the options to use.
	 * @param options.length The expected length of the word.
	 * @param options.strategy The strategy to apply when no words with a matching length are found.
	 *
	 * Available error handling strategies:
	 *
	 * - `fail`: Throws an error if no words with the given length are found.
	 * - `shortest`: Returns any of the shortest words.
	 * - `closest`: Returns any of the words closest to the given length.
	 * - `longest`: Returns any of the longest words.
	 * - `any-length`: Returns a word with any length.
	 *
	 * Defaults to `'any-length'`.
	 *
	 * @example
	 * faker.word.conjunction() // 'in order that'
	 * faker.word.conjunction(5) // 'since'
	 * faker.word.conjunction(100) // 'as long as'
	 * faker.word.conjunction({ strategy: 'shortest' }) // 'or'
	 * faker.word.conjunction({ length: { min: 5, max: 7 }, strategy: "fail" }) // 'hence'
	 *
	 * @since 6.0.0
	 */
	conjunction(options?: number | {
		length?: number | {
			min: number;
			max: number;
		};
		strategy?: "fail" | "closest" | "shortest" | "longest" | "any-length";
	}): string;
	/**
	 * Returns an interjection of random or optionally specified length.
	 *
	 * @param options The expected length of the word or the options to use.
	 * @param options.length The expected length of the word.
	 * @param options.strategy The strategy to apply when no words with a matching length are found.
	 *
	 * Available error handling strategies:
	 *
	 * - `fail`: Throws an error if no words with the given length are found.
	 * - `shortest`: Returns any of the shortest words.
	 * - `closest`: Returns any of the words closest to the given length.
	 * - `longest`: Returns any of the longest words.
	 * - `any-length`: Returns a word with any length.
	 *
	 * Defaults to `'any-length'`.
	 *
	 * @example
	 * faker.word.interjection() // 'gah'
	 * faker.word.interjection(5) // 'fooey'
	 * faker.word.interjection(100) // 'yowza'
	 * faker.word.interjection({ strategy: 'shortest' }) // 'hm'
	 * faker.word.interjection({ length: { min: 5, max: 7 }, strategy: "fail" }) // 'boohoo'
	 *
	 * @since 6.0.0
	 */
	interjection(options?: number | {
		length?: number | {
			min: number;
			max: number;
		};
		strategy?: "fail" | "closest" | "shortest" | "longest" | "any-length";
	}): string;
	/**
	 * Returns a noun of random or optionally specified length.
	 *
	 * @param options The expected length of the word or the options to use.
	 * @param options.length The expected length of the word.
	 * @param options.strategy The strategy to apply when no words with a matching length are found.
	 *
	 * Available error handling strategies:
	 *
	 * - `fail`: Throws an error if no words with the given length are found.
	 * - `shortest`: Returns any of the shortest words.
	 * - `closest`: Returns any of the words closest to the given length.
	 * - `longest`: Returns any of the longest words.
	 * - `any-length`: Returns a word with any length.
	 *
	 * Defaults to `'any-length'`.
	 *
	 * @example
	 * faker.word.noun() // 'external'
	 * faker.word.noun(5) // 'front'
	 * faker.word.noun(100) // 'care'
	 * faker.word.noun({ strategy: 'shortest' }) // 'ad'
	 * faker.word.noun({ length: { min: 5, max: 7 }, strategy: "fail" }) // 'average'
	 *
	 * @since 6.0.0
	 */
	noun(options?: number | {
		length?: number | {
			min: number;
			max: number;
		};
		strategy?: "fail" | "closest" | "shortest" | "longest" | "any-length";
	}): string;
	/**
	 * Returns a preposition of random or optionally specified length.
	 *
	 * @param options The expected length of the word or the options to use.
	 * @param options.length The expected length of the word.
	 * @param options.strategy The strategy to apply when no words with a matching length are found.
	 *
	 * Available error handling strategies:
	 *
	 * - `fail`: Throws an error if no words with the given length are found.
	 * - `shortest`: Returns any of the shortest words.
	 * - `closest`: Returns any of the words closest to the given length.
	 * - `longest`: Returns any of the longest words.
	 * - `any-length`: Returns a word with any length.
	 *
	 * Defaults to `'any-length'`.
	 *
	 * @example
	 * faker.word.preposition() // 'without'
	 * faker.word.preposition(5) // 'abaft'
	 * faker.word.preposition(100) // 'an'
	 * faker.word.preposition({ strategy: 'shortest' }) // 'a'
	 * faker.word.preposition({ length: { min: 5, max: 7 }, strategy: "fail" }) // 'given'
	 *
	 * @since 6.0.0
	 */
	preposition(options?: number | {
		length?: number | {
			min: number;
			max: number;
		};
		strategy?: "fail" | "closest" | "shortest" | "longest" | "any-length";
	}): string;
	/**
	 * Returns a verb of random or optionally specified length.
	 *
	 * @param options The expected length of the word or the options to use.
	 * @param options.length The expected length of the word.
	 * @param options.strategy The strategy to apply when no words with a matching length are found.
	 *
	 * Available error handling strategies:
	 *
	 * - `fail`: Throws an error if no words with the given length are found.
	 * - `shortest`: Returns any of the shortest words.
	 * - `closest`: Returns any of the words closest to the given length.
	 * - `longest`: Returns any of the longest words.
	 * - `any-length`: Returns a word with any length.
	 *
	 * Defaults to `'any-length'`.
	 *
	 * @example
	 * faker.word.verb() // 'act'
	 * faker.word.verb(5) // 'tinge'
	 * faker.word.verb(100) // 'mess'
	 * faker.word.verb({ strategy: 'shortest' }) // 'do'
	 * faker.word.verb({ length: { min: 5, max: 7 }, strategy: "fail" }) // 'vault'
	 *
	 * @since 6.0.0
	 */
	verb(options?: number | {
		length?: number | {
			min: number;
			max: number;
		};
		strategy?: "fail" | "closest" | "shortest" | "longest" | "any-length";
	}): string;
}
export declare type UsableLocale = LiteralUnion<KnownLocale>;
export declare type UsedLocales = Partial<Record<UsableLocale, LocaleDefinition>>;
export interface FakerOptions {
	locales: UsedLocales;
	locale?: UsableLocale;
	localeFallback?: UsableLocale;
}
export declare class Faker {
	locales: UsedLocales;
	private _locale;
	private _localeFallback;
	get locale(): UsableLocale;
	set locale(locale: UsableLocale);
	get localeFallback(): UsableLocale;
	set localeFallback(localeFallback: UsableLocale);
	readonly definitions: LocaleDefinition;
	readonly fake: FakeModule["fake"];
	readonly unique: UniqueModule["unique"];
	/**
	 * @deprecated Internal. Use faker.datatype.number() or faker.seed() instead.
	 */
	readonly mersenne: MersenneModule;
	readonly random: RandomModule;
	readonly helpers: HelpersModule;
	readonly datatype: DatatypeModule;
	readonly address: AddressModule;
	readonly animal: AnimalModule;
	readonly color: ColorModule;
	readonly commerce: CommerceModule;
	readonly company: CompanyModule;
	readonly database: DatabaseModule;
	readonly date: DateModule;
	readonly finance: FinanceModule;
	readonly git: GitModule;
	readonly hacker: HackerModule;
	readonly image: ImageModule;
	readonly internet: InternetModule;
	readonly lorem: LoremModule;
	readonly music: MusicModule;
	readonly name: NameModule;
	readonly phone: PhoneModule;
	readonly science: ScienceModule;
	readonly system: SystemModule;
	readonly vehicle: VehicleModule;
	readonly word: WordModule;
	constructor(opts: FakerOptions);
	/**
	 * Creates a Proxy based LocaleDefinition that virtually merges the locales.
	 */
	private initDefinitions;
	/**
	 * Sets the seed or generates a new one.
	 *
	 * Please note that generated values are dependent on both the seed and the
	 * number of calls that have been made since it was set.
	 *
	 * This method is intended to allow for consistent values in a tests, so you
	 * might want to use hardcoded values as the seed.
	 *
	 * In addition to that it can be used for creating truly random tests
	 * (by passing no arguments), that still can be reproduced if needed,
	 * by logging the result and explicitly setting it if needed.
	 *
	 * @param seed The seed to use. Defaults to a random number.
	 * @returns The seed that was set.
	 *
	 * @example
	 * // Consistent values for tests:
	 * faker.seed(42)
	 * faker.datatype.number(10); // 4
	 * faker.datatype.number(10); // 8
	 *
	 * faker.seed(42)
	 * faker.datatype.number(10); // 4
	 * faker.datatype.number(10); // 8
	 *
	 * @example
	 * // Random but reproducible tests:
	 * // Simply log the seed, and if you need to reproduce it, insert the seed here
	 * console.log('Running test with seed:', faker.seed());
	 */
	seed(seed?: number): number;
	/**
	 * Sets the seed array.
	 *
	 * Please note that generated values are dependent on both the seed and the
	 * number of calls that have been made since it was set.
	 *
	 * This method is intended to allow for consistent values in a tests, so you
	 * might want to use hardcoded values as the seed.
	 *
	 * In addition to that it can be used for creating truly random tests
	 * (by passing no arguments), that still can be reproduced if needed,
	 * by logging the result and explicitly setting it if needed.
	 *
	 * @param seedArray The seed array to use.
	 * @returns The seed array that was set.
	 *
	 * @example
	 * // Consistent values for tests:
	 * faker.seed([42, 13, 17])
	 * faker.datatype.number(10); // 4
	 * faker.datatype.number(10); // 8
	 *
	 * faker.seed([42, 13, 17])
	 * faker.datatype.number(10); // 4
	 * faker.datatype.number(10); // 8
	 *
	 * @example
	 * // Random but reproducible tests:
	 * // Simply log the seed, and if you need to reproduce it, insert the seed here
	 * console.log('Running test with seed:', faker.seed());
	 */
	seed(seedArray: number[]): number[];
	/**
	 * Set Faker's locale
	 *
	 * @param locale The locale to set (e.g. `en` or `en_AU`, `en_AU_ocker`).
	 */
	setLocale(locale: UsableLocale): void;
}
/**
 * An error instance that will be thrown by faker.
 */
export declare class FakerError extends Error {
}
export declare const faker: Faker;

export {};
