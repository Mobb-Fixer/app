// Generated by dts-bundle-generator v8.0.1

export interface FakeOptions {
	length?: number;
	locale?: any | string[];
}
export declare type markRequired<Type, Key extends keyof Type> = Type & {
	[Property in Key]-?: Type[Property];
};
export declare type Return<T, O extends FakeOptions> = [
	O
] extends [
	never
] ? T : O["length"] extends number ? T[] : T;
export interface RandomInRangeOptions {
	min?: number;
	max?: number;
	fraction?: number;
}
/**
 * Generate a random abbreviation.
 *
 * @category text
 *
 * @example
 *
 * randAbbreviation()
 *
 * @example
 *
 * randAbbreviation({ length: 10 })
 *
 */
export declare function randAbbreviation<O extends FakeOptions = never>(options?: O): Return<string, O>;
/**
 * Generate a random accessory.
 *
 * @category Commerce
 *
 * @example
 *
 * randAccessory()
 *
 * @example
 *
 * randAccessory({ length: 10 })
 *
 */
export declare function randAccessory<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface AccountOptions extends FakeOptions {
	accountLength?: number;
}
/**
 * Generate a random account.
 *
 * @category finance
 *
 * @example
 *
 * randAccount()
 *
 * @example
 *
 * randAccount({ accountLength: 12 }) // default is 9
 *
 * @example
 *
 * randAccount({ length: 10 })
 *
 */
export declare function randAccount<Options extends AccountOptions = never>(options?: Options): Return<string, Options>;
/**
 * Get a random alpha.
 *
 * @category text
 *
 * @example
 *
 * randAlpha()
 *
 * @example
 *
 * randAlpha({ length: 3 })
 *
 */
export declare function randAlpha<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Get a random alpha or numeric.
 *
 * @category text
 *
 * @example
 *
 * randAlphaNumeric()
 *
 * @example
 *
 * randAlphaNumeric({ length: 3 })
 *
 */
export declare function randAlphaNumeric<Options extends FakeOptions = never>(options?: Options): Return<string | number, Options>;
/**
 * Generate a random american football team.
 *
 * @category sports
 *
 * @example
 *
 * randAmericanFootballTeam()
 *
 * @example
 *
 * randAmericanFootballTeam({ length: 10 })
 *
 */
export declare function randAmericanFootballTeam<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface RandomAmountOptions extends RandomInRangeOptions, FakeOptions {
	symbol?: string;
}
/**
 * Generate a random amount.
 *
 * @category finance
 *
 * @example
 *
 * randAmount()
 *
 * @example
 *
 * randAmount({ min: 10, max: 20, fraction: 1 }) // 12.5
 *
 * @example
 *
 * randAmount({ min: 10, max: 20, fraction: 2 }) // 12.52
 *
 * @example
 *
 * randAmount({ symbol: '$' }) // '$12.52'
 *
 * @example
 *
 * randAmount({ length: 10 })
 */
export declare function randAmount<Options extends markRequired<RandomAmountOptions, "symbol">>(options: Options): Return<string, Options>;
export declare function randAmount<Options extends RandomAmountOptions = never>(options?: Options): Return<number, Options>;
/**
 * Generate a random animal type.
 *
 * @category animals
 *
 * @example
 *
 * randAnimalType()
 *
 * @example
 *
 * randAnimalType({ length: 10 })
 *
 */
export declare function randAnimalType<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random animal.
 *
 * @category animals
 *
 * @example
 *
 * randAnimal()
 *
 * @example
 *
 * randAnimal({ length: 10 })
 *
 */
export declare function randAnimal<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random ARN.
 *
 * @category AWS
 *
 * @example
 *
 * randArn()
 *
 * @example
 *
 * randArn({ length: 10 })
 *
 */
export declare function randArn<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface AvatarOptions extends FakeOptions {
	size?: number;
}
/**
 * Generate a random avatar.
 *
 * @category person
 *
 * @example
 *
 * randAvatar()
 *
 * @example
 *
 * randAvatar({ length: 10 })
 *
 * @example
 *
 * randAvatar({ size: 200 }) // default is 100
 *
 */
export declare function randAvatar<Options extends AvatarOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random AWS region.
 *
 * @category AWS
 *
 * @example
 *
 * randAwsRegion()
 *
 * @example
 *
 * randAwsRegion({ length: 10 })
 *
 */
export declare function randAwsRegion<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random AWS service name.
 *
 * @category AWS
 *
 * @example
 *
 * randAwsService()
 *
 * @example
 *
 * randAwsService({ length: 10 })
 *
 */
export declare function randAwsService<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random AWS request id.
 *
 * @category AWS
 *
 * @example
 *
 * randAwsRequestId()
 *
 * @example
 *
 * randAwsRequestId({ length: 10 })
 *
 */
export declare function randAwsRequestId<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random baseball team.
 *
 * @category sports
 *
 * @example
 *
 * randBaseballTeam()
 *
 * @example
 *
 * randBaseballTeam({ length: 10 })
 *
 */
export declare function randBaseballTeam<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random basketball team.
 *
 * @category sports
 *
 * @example
 *
 * randBasketballTeam()
 *
 * @example
 *
 * randBasketballTeam({ length: 10 })
 *
 */
export declare function randBasketballTeam<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random bear.
 *
 * @category animals
 *
 * @example
 *
 * randBear()
 *
 * @example
 *
 * randBear({ length: 10 })
 *
 */
export declare function randBear<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface BetweenOptions extends FakeOptions {
	from: Date | string;
	to: Date | string;
}
/**
 * Generate a random date between ranges.
 *
 * @category date
 *
 * @example
 *
 * randBetweenDate({ from: new Date('10/07/2020'), to: new Date() })
 *
 * @example
 *
 * randBetweenDate({ from: new Date('10/07/2020'), to: new Date(), length: 10 })
 *
 */
export declare function randBetweenDate<Options extends BetweenOptions = never>(options: Options): Return<Date, Options>;
export interface SwiftOptions extends FakeOptions {
	bankCode?: string;
	countryCode?: string;
	locationCode?: string;
	branchCode?: string;
	fillBranchCode?: boolean;
}
/**
 * Generate a random swift bic code.
 *
 * @category finance
 *
 * @example
 *
 * randSwift()
 *
 * @example
 *
 * randSwift({ bankCode: 'DEUT' }) // bank code of Deutsche Bank
 *
 * @example
 *
 * randSwift({ countryCode: 'DE' }) // country code with ISO country code
 *
 * @example
 *
 * randSwift({ locationCode: 'MM' }) // location code for Milan MM or for Frankfurt FF and etc
 *
 * @example
 *
 * randSwift({ branchCode: '250' }) // bank branch code
 *
 * @example
 *
 * randSwift({ fillBranchCode: true }) // bank branch code filled with XXX
 *
 * @example
 *
 * randSwift({ length: 10 })
 *
 */
export declare function randSwift<Options extends SwiftOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random swift bic code.
 *
 * @category finance
 *
 * @example
 *
 * randBic()
 *
 * @example
 *
 * randBic({ bankCode: 'DEUT' }) // bank code of Deutsche Bank
 *
 * @example
 *
 * randBic({ countryCode: 'DE' }) // country code with ISO country code
 *
 * @example
 *
 * randBic({ locationCode: 'MM' }) // location code for Milan MM for Frankfurt FF and etc
 *
 * @example
 *
 * randBic({ branchCode: '250' }) // bank branch code
 *
 * @example
 *
 * randBic({ fillBranchCode: true }) // bank branch code filled with XXX
 *
 * @example
 *
 * randBic({ length: 10 })
 *
 */
export declare function randBic<Options extends SwiftOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random binary.
 *
 * @category Math
 *
 * @example
 *
 * randBinary()
 *
 * @example
 *
 * randBinary({ length: 10 })
 *
 */
export declare function randBinary<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random bird.
 *
 * @category animals
 *
 * @example
 *
 * randBird()
 *
 * @example
 *
 * randBird({ length: 10 })
 *
 */
export declare function randBird<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random bitcoin-address.
 *
 * @category finance
 *
 * @example
 *
 * randBitcoinAddress()
 *
 * @example
 *
 * randBitcoinAddress({ length: 10 })
 *
 */
export declare function randBitcoinAddress<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface BookOptions extends FakeOptions {
	category?: "Comedy" | "Crime" | "Family and Self" | "Love" | "Science Fiction and Fantasy" | "State of the Nation" | "War and Travel";
}
export interface Book {
	title: string;
	author: string;
	category: BookOptions["category"];
}
/**
 * Generate a random book.
 *
 * @category entities
 *
 * @example
 *
 * randBook()
 *
 * @example
 *
 * randBook({ length: 10 })
 *
 * @example
 *
 * randBook({ category: 'Comedy' })
 *
 */
export declare function randBook<Options extends BookOptions = never>(options?: Options): Return<Book, Options>;
/**
 * Generate a random boolean.
 *
 * @category general
 *
 * @example
 *
 * randBoolean()
 *
 * @example
 *
 * randBoolean({ length: 10 })
 *
 */
export declare function randBoolean<Options extends FakeOptions = never>(options?: Options): Return<boolean, Options>;
/**
 * Generate a random brand.
 *
 * @category company
 *
 * @example
 *
 * randBrand()
 *
 * @example
 *
 * randBrand({ length: 10 })
 *
 */
export declare function randBrand<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random browser.
 *
 * @category internet
 *
 * @example
 *
 * randBrowser()
 *
 * @example
 *
 * randBrowser({ length: 10 })
 *
 */
export declare function randBrowser<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random cardinal direction.
 *
 * @category address
 *
 * @example
 *
 * randCardinalDirection()
 *
 * @example
 *
 * randCardinalDirection({ length: 10 })
 *
 */
export declare function randCardinalDirection<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random cat.
 *
 * @category animals
 *
 * @example
 *
 * randCat()
 *
 * @example
 *
 * randCat({ length: 10 })
 *
 */
export declare function randCat<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random catch phrase.
 *
 * @category text
 *
 * @example
 *
 * randCatchPhrase()
 *
 * @example
 *
 * randCatchPhrase({ length: 10 })
 *
 */
export declare function randCatchPhrase<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random cetacean.
 *
 * @category animals
 *
 * @example
 *
 * randCetacean()
 *
 * @example
 *
 * randCetacean({ length: 10 })
 *
 */
export declare function randCetacean<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random city.
 *
 * @category Address
 *
 * @example
 *
 * randCity()
 *
 * @example
 *
 * randCity({ length: 10 })
 *
 */
export declare function randCity<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random clothing size.
 *
 * @category Commerce
 *
 * @example
 *
 * randClothingSize()
 *
 * @example
 *
 * randClothingSize({ length: 10 })
 *
 */
export declare function randClothingSize<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random color.
 *
 * @category colors
 *
 * @example
 *
 * randColor()
 *
 * @example
 *
 * randColor({ length: 10 })
 *
 */
export declare function randColor<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random company name.
 *
 * @category Company
 *
 * @example
 *
 * randCompanyName()
 *
 * @example
 *
 * randCompanyName({ length: 10 })
 *
 */
export declare function randCompanyName<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random country.
 *
 * @category address
 *
 * @example
 *
 * randCountry()
 *
 * @example
 *
 * randCountry({ length: 10 })
 *
 */
export declare function randCountry<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random country code.
 *
 * @category address
 *
 * @example
 *
 * randCountryCode()
 *
 * @example
 *
 * randCountryCode({ length: 10 })
 *
 */
export declare function randCountryCode<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random county.
 *
 * @category Address
 *
 * @example
 *
 * randCounty()
 *
 * @example
 *
 * randCounty({ length: 10 })
 *
 */
export declare function randCounty<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random cow.
 *
 * @category animals
 *
 * @example
 *
 * randCow()
 *
 * @example
 *
 * randCow({ length: 10 })
 *
 */
export declare function randCow<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random credit card CVV.
 *
 * @category Finance
 *
 * @example
 *
 * randCreditCardCVV()
 *
 * @example
 *
 * randCreditCardCVV({ length: 10 })
 *
 */
export declare function randCreditCardCVV<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random credit card brand.
 *
 * @category Finance
 *
 * @example
 *
 * randCreditCardBrand()
 *
 * @example
 *
 * randCreditCardBrand({ length: 10 })
 *
 */
export declare function randCreditCardBrand<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface CreditCardNumberOptions extends FakeOptions {
	brand?: Brand;
}
export declare type Brand = "American Express" | "UnionPay" | "Diners Club" | "Discover Card" | "RuPay" | "JCB" | "Maestro" | "Dankort" | "Mastercard" | "Visa" | "Visa Electron" | "UATP";
/**
 * Generate a random credit card number.
 *
 * @category finance
 *
 * @example
 *
 * randCreditCardNumber()
 *
 * @example
 *
 * randCreditCardNumber({ brand: 'Visa' })
 *
 * @example
 *
 * randCreditCardNumber({ length: 10 })
 *
 */
export declare function randCreditCardNumber<Options extends CreditCardNumberOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random crocodilia.
 *
 * @category animals
 *
 * @example
 *
 * randCrocodilia()
 *
 * @example
 *
 * randCrocodilia({ length: 10 })
 *
 */
export declare function randCrocodilia<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random currency code.
 *
 * @category finance
 *
 * @example
 *
 * randCurrencyCode()
 *
 * @example
 *
 * randCurrencyCode({ length: 10 })
 *
 */
export declare function randCurrencyCode<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random currency name.
 *
 * @category Finance
 *
 * @example
 *
 * randCurrencyName()
 *
 * @example
 *
 * randCurrencyName({ length: 10 })
 *
 */
export declare function randCurrencyName<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random currency symbol.
 *
 * @category finance
 *
 * @example
 *
 * randCurrencySymbol()
 *
 * @example
 *
 * randCurrencySymbol({ length: 10 })
 *
 */
export declare function randCurrencySymbol<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random database collation.
 *
 * @category database
 *
 * @example
 *
 * randDatabaseCollation()
 *
 * @example
 *
 * randDatabaseCollation({ length: 10 })
 *
 */
export declare function randDatabaseCollation<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random database column.
 *
 * @category database
 *
 * @example
 *
 * randDatabaseColumn()
 *
 * @example
 *
 * randDatabaseColumn({ length: 10 })
 *
 */
export declare function randDatabaseColumn<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random database engine.
 *
 * @category database
 *
 * @example
 *
 * randDatabaseEngine()
 *
 * @example
 *
 * randDatabaseEngine({ length: 10 })
 *
 */
export declare function randDatabaseEngine<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random database type.
 *
 * @category database
 *
 * @example
 *
 * randDatabaseType()
 *
 * @example
 *
 * randDatabaseType({ length: 10 })
 *
 */
export declare function randDatabaseType<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random database.
 *
 * @category database
 *
 * @example
 *
 * randDatabase()
 *
 * @example
 *
 * randDatabase({ length: 10 })
 *
 */
export declare function randDatabase<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random department.
 *
 * @category commerce
 *
 * @example
 *
 * randDepartment()
 *
 * @example
 *
 * randDepartment({ length: 10 })
 *
 */
export declare function randDepartment<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random direction.
 *
 * @category address
 *
 * @example
 *
 * randDirection()
 *
 * @example
 *
 * randDirection({ length: 10 })
 *
 */
export declare function randDirection<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random directory path.
 *
 * @category system
 *
 * @example
 *
 * randDirectoryPath()
 *
 * @example
 *
 * randDirectoryPath({ length: 10 })
 *
 */
export declare function randDirectoryPath<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random dog.
 *
 * @category animals
 *
 * @example
 *
 * randDog()
 *
 * @example
 *
 * randDog({ length: 10 })
 *
 */
export declare function randDog<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random domain name.
 *
 * @category Internet
 *
 * @example
 *
 * randDomainName()
 *
 * @example
 *
 * randDomainName({ length: 10 })
 *
 */
export declare function randDomainName<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random domain suffix.
 *
 * @category Internet
 *
 * @example
 *
 * randDomainSuffix()
 *
 * @example
 *
 * randDomainSuffix({ length: 10 })
 *
 */
export declare function randDomainSuffix<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random drink.
 *
 * @category drinks
 *
 * @example
 *
 * randDrinks()
 *
 * @example
 *
 * randDrinks({ length: 10 })
 *
 */
export declare function randDrinks<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface EmailOptions extends FakeOptions {
	firstName?: string;
	lastName?: string;
	provider?: string;
	suffix?: string;
	nameSeparator?: NameSeparators;
}
export declare type NameSeparators = "." | "-" | "_" | "+" | "none";
/**
 * Generate a random email.
 *
 * @category Person, User
 *
 * @example
 *
 * randEmail()
 *
 * @example
 *
 * randEmail({ length: 10 })
 *
 * @example
 *
 * randEmail({ firstName: 'Netanel' })
 *
 * @example
 *
 * randEmail({ lastName: 'Basal' })
 *
 * @example
 *
 * randEmail({ nameSeparator: '.' })
 *
 * @example
 *
 * randEmail({ provider: 'gmail' })
 *
 * @example
 *
 * randEmail({ suffix: 'com' })
 *
 *
 */
export declare function randEmail<Options extends EmailOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random email provider.
 *
 * @category Internet
 *
 * @example
 *
 * randEmailProvider()
 *
 * @example
 *
 * randEmailProvider({ length: 10 })
 *
 */
export declare function randEmailProvider<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random emoji.
 *
 * @category text
 *
 * @example
 *
 * randEmoji()
 *
 * @example
 *
 * randEmoji({ length: 10 })
 *
 */
export declare function randEmoji<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random ethereum address.
 *
 * @category Finance
 *
 * @example
 *
 * randEthereumAddress()
 *
 * @example
 *
 * randEthereumAddress({ length: 10 })
 *
 */
export declare function randEthereumAddress<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random file ext.
 *
 * @category system
 *
 * @example
 *
 * randFileExt()
 *
 * @example
 *
 * randFileExt({ length: 10 })
 *
 */
export declare function randFileExt<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random file name.
 *
 * @category system
 *
 * @example
 *
 * randFileName()
 *
 * @example
 *
 * randFileName({ length: 10 })
 *
 */
export declare function randFileName<Options extends FakeOptions & {
	extension?: string;
} = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random file path.
 *
 * @category system
 *
 * @example
 *
 * randFilePath()
 *
 * @example
 *
 * randFilePath({ length: 10 })
 *
 */
export declare function randFilePath<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random file type.
 *
 * @category system
 *
 * @example
 *
 * randFileType()
 *
 * @example
 *
 * randFileType({ length: 10 })
 *
 */
export declare function randFileType<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface NameOptions extends FakeOptions {
	withAccents?: boolean;
	gender?: "male" | "female";
}
/**
 * Generate a random full name.
 *
 * @category person
 *
 * @example
 *
 * randFullName()
 *
 * @example
 *
 * randFullName({ gender: 'female' }) // Emma Marková
 *
 * @example
 *
 * randFullName({ withAccents: false }) // return full name without special symbols like â, î or ô and etc
 *
 * @example
 *
 * randFullName({ length: 10 })
 *
 */
export declare function randFullName<Options extends NameOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random first name.
 *
 * @category person
 *
 * @example
 *
 * randFirstName()
 *
 * @example
 *
 * randFirstName({ withAccents: true })
 *
 * @example
 *
 * randFirstName({ gender: 'female' }) // Emma
 *
 * @example
 *
 * randFirstName({ length: 10 })
 *
 */
export declare function randFirstName<Options extends NameOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random fish.
 *
 * @category animals
 *
 * @example
 *
 * randFish()
 *
 * @example
 *
 * randFish({ length: 10 })
 *
 */
export declare function randFish<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface RandomFloatOptions extends RandomInRangeOptions, FakeOptions {
}
/**
 * Generate a random float.
 *
 * @category general, math
 *
 * @example
 *
 * randFloat()
 *
 * @example
 *
 * randFloat({ length: 10 })
 *
 * @example
 *
 * randFloat({ min: 10, max: 20, fraction: 1 }) // 12.5
 *
 * @example
 *
 * randFloat({ min: 10, max: 20, fraction: 2 }) // 12.52
 */
export declare function randFloat<Options extends RandomFloatOptions = never>(options?: Options): Return<number, Options>;
/**
 * Generate a random font family.
 *
 * @category code
 *
 * @example
 *
 * randFontFamily()
 *
 * @example
 *
 * randFontFamily({ length: 10 })
 *
 */
export declare function randFontFamily<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export declare type FontSizeSuffix = "px" | "cm" | "em" | "rem" | "vw" | "vh" | "vmin" | "vmax" | "%";
export interface FontSizeOptions extends FakeOptions {
	suffix?: FontSizeSuffix;
}
/**
 * Generate a random font size.
 *
 * @category code
 *
 * @example
 *
 * randFontSize()
 *
 * @example
 *
 * randFontSize({ length: 10 })
 *
 */
export declare function randFontSize<Options extends FontSizeOptions = never>(options?: Options): Return<string, Options>;
export declare type FoodOrigin = "china" | "italy" | "india" | "mexico" | "japan" | "france" | "lebanon" | "thailand" | "greece" | "turkey" | "spain" | "venezuela" | "chile" | "argentina" | "colombia" | "ecuador" | "peru" | "el salvador" | "romania";
export interface FoodOptions extends FakeOptions {
	origin?: FoodOrigin;
}
/**
 * Generate a random food name.
 *
 * @category Food
 *
 * @example
 *
 * randFood()
 *
 * @example
 *
 * randFood({ origin: 'italy' })
 *
 * @example
 *
 * randFood({ length: 10 })
 *
 */
export declare function randFood<Options extends FoodOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random football team.
 *
 * @category sports
 *
 * @example
 *
 * randFootballTeam()
 *
 * @example
 *
 * randFootballTeam({ length: 10 })
 *
 */
export declare function randFootballTeam<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random adverb for definite or indefinite frequency.
 *
 * @category date
 *
 * @example
 *
 * randFrequency()
 *
 * @example
 *
 * randFrequency({ length: 10 })
 *
 */
export declare function randFrequency<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface FutureOptions extends FakeOptions {
	years?: number;
}
/**
 * Generate a random future.
 *
 * @category date
 *
 * @example
 *
 * randFutureDate()
 *
 * @example
 *
 * randFutureDate({ length: 10 })
 *
 * @example
 *
 * randFutureDate({ years: 10 }) // default is 1
 *
 */
export declare function randFutureDate<Options extends FutureOptions = never>(options?: Options): Return<Date, Options>;
export interface GenderOptions extends FakeOptions {
	code?: boolean;
}
/**
 * Generate a random gender.
 *
 * @category person
 *
 * @example
 *
 * randGender()
 *
 * @example
 *
 * randGender({ length: 10 })
 *
 * @example
 *
 * randGender({ code: true }) // default is false
 *
 */
export declare function randGender<Options extends GenderOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random git branch.
 *
 * @category git
 *
 * @example
 *
 * randGitBranch()
 *
 * @example
 *
 * randGitBranch({ length: 10 })
 *
 */
export declare function randGitBranch<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random git commit.
 *
 * @category git
 *
 * @example
 *
 * randGitCommitEntry()
 *
 * @example
 *
 * randGitCommitEntry({ length: 10 })
 *
 */
export declare function randGitCommitEntry<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random git message.
 *
 * @category git
 *
 * @example
 *
 * randGitCommitMessage()
 *
 * @example
 *
 * randGitCommitMessage({ length: 10 })
 *
 */
export declare function randGitCommitMessage<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random git sha.
 *
 * @category git
 *
 * @example
 *
 * randGitCommitSha()
 *
 * @example
 *
 * randGitCommitSha({ length: 10 })
 *
 */
export declare function randGitCommitSha<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random git short sha.
 *
 * @category git
 *
 * @example
 *
 * randGitShortSha()
 *
 * @example
 *
 * randGitShortSha({ length: 10 })
 *
 */
export declare function randGitShortSha<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random hex.
 *
 * @category colors
 *
 * @example
 *
 * randHex()
 *
 * @example
 *
 * randHex({ length: 10 })
 *
 */
export declare function randHex<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random hexa decimal.
 *
 * @category system
 *
 * @example
 *
 * randHexaDecimal()
 *
 * @example
 *
 * randHexaDecimal({ length: 10 })
 *
 */
export declare function randHexaDecimal<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random horse.
 *
 * @category animals
 *
 * @example
 *
 * randHorse()
 *
 * @example
 *
 * randHorse({ length: 10 })
 *
 */
export declare function randHorse<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface HSLOptions extends FakeOptions {
	alpha?: boolean;
}
/**
 * Generate a random hsl color.
 *
 * @category colors
 *
 * @example
 *
 * randHsl()
 *
 * @example
 *
 * randHsl({ length: 3 })
 *
 * @example
 *
 * randHsl({ alpha: true }) // default is false
 *
 */
export declare function randHsl<Options extends HSLOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random http method.
 *
 * @category internet
 *
 * @example
 *
 * randHttpMethod()
 *
 * @example
 *
 * randHttpMethod({ length: 10 })
 *
 */
export declare function randHttpMethod<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface IbanOptions extends FakeOptions {
	countryCode?: string;
}
/**
 * Generate a random IBAN number.
 *
 * @category finance
 *
 * @example
 *
 * randIban()
 *
 * @example
 *
 * randSwift({ countryCode: 'DE' }) // country code with ISO country code
 *
 * @example
 *
 * randIban({ length: 10 })
 *
 */
export declare function randIban<Options extends IbanOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random ice hockey team.
 *
 * @category sports
 *
 * @example
 *
 * randIceHockeyTeam()
 *
 * @example
 *
 * randIceHockeyTeam({ length: 10 })
 *
 */
export declare function randIceHockeyTeam<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random img.
 *
 * @category General
 *
 * @example
 *
 * randImg()
 *
 * @example
 *
 * randImg({ length: 10 })
 *
 */
export declare function randImg<Options extends FakeOptions & {
	width?: number;
	height?: number;
	category?: Category;
} = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random integration.
 *
 * @category internet
 *
 * @example
 *
 * randIntegrations()
 *
 * @example
 *
 * randIntegrations({ length: 10 })
 *
 */
export declare function randIntegration<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random ip.
 *
 * @category internet
 *
 * @example
 *
 * randIp()
 *
 * @example
 *
 * randIp({ length: 10 })
 *
 */
export declare function randIp<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random ipv6.
 *
 * @category internet
 *
 * @example
 *
 * randIpv6()
 *
 * @example
 *
 * randIpv6({ length: 10 })
 *
 */
export declare function randIpv6<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random job area.
 *
 * @category Jobs
 *
 * @example
 *
 * randJobArea()
 *
 * @example
 *
 * randJobArea({ length: 10 })
 *
 */
export declare function randJobArea<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random job descriptor.
 *
 * @category jobs
 *
 * @example
 *
 * randJobDescriptor()
 *
 * @example
 *
 * randJobDescriptor({ length: 10 })
 *
 */
export declare function randJobDescriptor<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random job title.
 *
 * @category Jobs
 *
 * @example
 *
 * randJobTitle()
 *
 * @example
 *
 * randJobTitle({ length: 10 })
 *
 */
export declare function randJobTitle<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random job type.
 *
 * @category jobs
 *
 * @example
 *
 * randJobType()
 *
 * @example
 *
 * randJobType({ length: 10 })
 *
 */
export declare function randJobType<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface LanguageOptions extends FakeOptions {
	code?: boolean;
}
/**
 * Generate a random language.
 *
 * @category person
 *
 * @example
 *
 * randLanguage()
 *
 * @example
 *
 * randLanguage({ length: 10 })
 *
 * @example
 *
 * randLanguage({ code: true }) // default is false
 *
 */
export declare function randLanguage<Options extends LanguageOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random last name.
 *
 * @category person
 *
 * @example
 *
 * randLastName()
 *
 * @example
 *
 * randLastName({ withAccents: false })
 *
 * @example
 *
 * randLastName({ length: 10 })
 *
 */
export declare function randLastName<Options extends NameOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random latitude.
 *
 * @category address
 *
 * @example
 *
 * randLatitude()
 *
 * @example
 *
 * randLatitude({ length: 10 })
 *
 */
export declare function randLatitude<Options extends FakeOptions = never>(options?: Options): Return<number, Options>;
export interface LineOptions extends FakeOptions {
	lineCount?: number;
}
/**
 * Generate random lines.
 *
 * @category text
 *
 * @example
 *
 * randLine()
 *
 * @example
 *
 * randLine({ lineCount: 10 }) // default is 5
 *
 */
export declare function randLine<Options extends LineOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random lines.
 *
 * @category text
 *
 * @example
 *
 * randLines()
 *
 * @example
 *
 * randLines({ length: 10 })
 *
 */
export declare function randLines<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random lion.
 *
 * @category animals
 *
 * @example
 *
 * randLion()
 *
 * @example
 *
 * randLion({ length: 10 })
 *
 */
export declare function randLion<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random locale.
 *
 * @category address
 *
 * @example
 *
 * randLocale()
 *
 * @example
 *
 * randLocale({ length: 10 })
 *
 */
export declare function randLocale<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random longitude.
 *
 * @category address
 *
 * @example
 *
 * randLongitude()
 *
 * @example
 *
 * randLongitude({ length: 10 })
 *
 */
export declare function randLongitude<Options extends FakeOptions = never>(options?: Options): Return<number, Options>;
/**
 * Generate a random mac address.
 *
 * @category system
 *
 * @example
 *
 * randMac()
 *
 * @example
 *
 * randMac({ length: 10 })
 *
 */
export declare function randMac<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random mask.
 *
 * @category Finance
 *
 * @example
 *
 * randMask()
 *
 * @example
 *
 * randMask({ mask: '@#### @##' })
 *
 * @example
 *
 * randMask({ length: 10 })
 *
 */
export declare function randMask<Options extends FakeOptions & {
	mask?: string;
	char?: string;
	digit?: string;
} = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random mime type.
 *
 * @category system
 *
 * @example
 *
 * randMimeType()
 *
 * @example
 *
 * randMimeType({ length: 10 })
 *
 */
export declare function randMimeType<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface MonthOptions extends FakeOptions {
	abbreviation?: boolean;
}
/**
 * Generate a random month.
 *
 * @category date
 *
 * @example
 *
 * randMonth()
 *
 * @example
 *
 * randMonth({ abbreviation: true })
 *
 *
 * @example
 *
 * randMonth({ length: 10 })
 *
 */
export declare function randMonth<Options extends MonthOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random motorcylce manufacturer.
 *
 * @category motorcycle
 *
 * @example
 *
 * randMotorcylceManufacturer()
 *
 * @example
 *
 * randMotorcylceManufacturer({ length: 10 })
 *
 */
export declare function randMotorcylceManufacturer<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random movie.
 *
 * @category Movie
 *
 * @example
 *
 * randMovie()
 *
 * @example
 *
 * randMovie({ length: 10 })
 *
 */
export declare function randMovie<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random movie character.
 *
 * @category movie
 *
 * @example
 *
 * randMovieCharacter()
 *
 * @example
 *
 * randMovieCharacter({ length: 10 })
 *
 */
export declare function randMovieCharacter<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random genre.
 *
 * @category music
 *
 * @example
 *
 * randMusicGenre()
 *
 * @example
 *
 * randMusicGenre({ length: 10 })
 *
 */
export declare function randMusicGenre<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random GPS coordinate.
 *
 * @category address
 *
 * @example
 *
 * randNearbyGPSCoordinate()
 *
 * @example
 *
 * randNearbyGPSCoordinate({ length: 10 })
 *
 */
export declare function randNearbyGPSCoordinate<Options extends FakeOptions = never>(options?: Options): Return<number[], Options>;
export interface RandomNumberOptions extends RandomInRangeOptions, FakeOptions {
	precision?: number;
}
/**
 * Generate a random number.
 *
 * @category general, math
 *
 * @example
 *
 * randNumber()
 *
 * @example
 *
 * randNumber({ length: 10 })
 *
 * @example
 *
 * randNumber({ min: 10, max: 1000 }) // default is 'min': 0, 'max': 999_999
 *
 * @example
 *
 * randNumber({ min: 0.1, max: 1, fraction: 2 }) // 0.37
 *
 * @example
 *
 * randNumber({ min: 1000, max: 100000, precision: 1000 }) // 67_000
 *
 * @example
 *
 * randNumber({ min: 1000, max: 2000, precision: 100 }) // 1_200
 *
 * @example
 *
 * randNumber({ min: 1000, max: 2000, precision: 10 }) // 1_250
 */
export declare function randNumber<Options extends RandomNumberOptions = never>(options?: Options): Return<number, Options>;
/**
 * Generate a random OAuth provider.
 *
 * @category Internet
 *
 * @example
 *
 * randOAuthProvider()
 *
 * @example
 *
 * randOAuthProvider({ length: 10 })
 *
 */
export declare function randOAuthProvider<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random octal.
 *
 * @category Math
 *
 * @example
 *
 * randOctal()
 *
 * @example
 *
 * randOctal({ length: 10 })
 *
 */
export declare function randOctal<Options extends FakeOptions = never>(options?: Options): Return<bigint, Options>;
/**
 * Generate a random ordinal direction.
 *
 * @category address
 *
 * @example
 *
 * randOrdinalDirection()
 *
 * @example
 *
 * randOrdinalDirection({ length: 10 })
 *
 */
export declare function randOrdinalDirection<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random paragraph.
 *
 * @category text
 *
 * @example
 *
 * randParagraph()
 *
 * @example
 *
 * randParagraph({ length: 10 })
 *
 */
export declare function randParagraph<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface PasswordOptions extends FakeOptions {
	size?: number;
}
/**
 * Generate a random password.
 *
 * @category person
 *
 * @example
 *
 * randPassword()
 *
 * @example
 *
 * randPassword({ length: 10 })
 *
 * @example
 *
 * randPassword({ size: 10 }) // default is 15
 *
 */
export declare function randPassword<Options extends PasswordOptions = never>(options?: Options): Return<string, Options>;
export interface PastOptions extends FakeOptions {
	years?: number;
}
/**
 * Generate a random past date.
 *
 * @category date
 *
 * @example
 *
 * randPastDate()
 *
 * @example
 *
 * randPastDate({ length: 10 })
 *
 * @example
 *
 * randPastDate({ years: 2 }) // default is 1
 *
 */
export declare function randPastDate<Options extends PastOptions = never>(options?: Options): Return<Date, Options>;
export interface PermissionOptions extends FakeOptions {
	numeric?: boolean;
}
/**
 * Generate a random permission.
 *
 * @category system
 *
 * @example
 *
 * randPermission()
 *
 * @example
 *
 * randPermission({ length: 10 })
 *
 * @example
 *
 * randPermission({ numeric: true })
 *
 */
export declare function randPermission<Options extends PermissionOptions = never>(options?: Options): Return<number, Options> | Return<string, Options>;
/**
 * Generate a random person title.
 *
 * @category person
 *
 * @example
 *
 * randPersonTitle()
 *
 * @example
 *
 * randPersonTitle({ length: 10 })
 *
 */
export declare function randPersonTitle<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export declare type CountryCode = "AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AN" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BM" | "BN" | "BO" | "BR" | "BS" | "BT" | "BW" | "BY" | "BZ" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GD" | "GE" | "GF" | "GH" | "GI" | "GL" | "GM" | "GN" | "GQ" | "GR" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TC" | "TD" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "GB" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "YE" | "ZA" | "ZM" | "ZW" | "US" | "CA" | "UK";
/**
 * Generate a random phone number.
 *
 * @category person
 *
 * @example
 *
 * randPhoneNumber()
 *
 * @example
 *
 * randPhoneNumber({ countryCode: 'US' })
 *
 * @example
 *
 * randPhoneNumber({ length: 10 })
 *
 */
export declare function randPhoneNumber<Options extends FakeOptions & {
	countryCode?: CountryCode;
} = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random phrase.
 *
 * @category text
 *
 * @example
 *
 * randPhrase()
 *
 * @example
 *
 * randPhrase({ length: 10 })
 *
 */
export declare function randPhrase<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random port.
 *
 * @category internet
 *
 * @example
 *
 * randPort()
 *
 * @example
 *
 * randPort({ length: 10 })
 *
 */
export declare function randPort<Options extends FakeOptions = never>(options?: Options): Return<number, Options>;
export interface User {
	id: string;
	firstName: string;
	lastName: string;
	username: string;
	email: string;
	img: string;
	address: {
		street: string;
		city: string;
		zipCode: string;
	};
	phone: string;
}
/**
 * Generate a random user.
 *
 * @category entities, user
 *
 * @example
 *
 * randUser()
 *
 * @example
 *
 * randUser({ length: 10 })
 *
 */
export declare function randUser<Options extends FakeOptions = never>(options?: Options): Return<User, Options>;
export interface Post {
	id: string;
	title: string;
	body: string;
	comments: Array<{
		id: string;
		text: string;
		user: User;
	}>;
}
/**
 * Generate a random post.
 *
 * @category entities, internet
 *
 * @example
 *
 * randPost()
 *
 * @example
 *
 * randPost({ length: 10 })
 *
 */
export declare function randPost<Options extends FakeOptions = never>(options?: Options): Return<Post, Options>;
/**
 * Generate a random priority.
 *
 * @category general
 *
 * @example
 *
 * randPriority()
 *
 * @example
 *
 * randPriority({ length: 10 })
 *
 */
export declare function randPriority<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface Product {
	id: string;
	title: string;
	description: string;
	price: string;
	category: string;
	image: string;
	rating: {
		rate: string;
		count: string;
	};
}
/**
 * Generate a random product.
 *
 * @category entities
 *
 * @example
 *
 * randProduct()
 *
 * @example
 *
 * randProduct({ length: 10 })
 *
 */
export declare function randProduct<Options extends FakeOptions = never>(options?: Options): Return<{
	id: string;
	title: string;
	description: string;
	price: string;
	category: string;
	image: string;
	rating: {
		rate: string;
		count: string;
	};
}, Options>;
/**
 * Generate a random product adjective.
 *
 * @category commerce
 *
 * @example
 *
 * randProductAdjective()
 *
 * @example
 *
 * randProductAdjective({ length: 10 })
 *
 */
export declare function randProductAdjective<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random product category.
 *
 * @category Commerce
 *
 * @example
 *
 * randProductCategory()
 *
 * @example
 *
 * randProductCategory({ length: 10 })
 *
 */
export declare function randProductCategory<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random product description.
 *
 * @category Commerce
 *
 * @example
 *
 * randProductDescription()
 *
 * @example
 *
 * randProductDescription({ length: 10 })
 *
 */
export declare function randProductDescription<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random product material.
 *
 * @category commerce
 *
 * @example
 *
 * randProductMaterial()
 *
 * @example
 *
 * randProductMaterial({ length: 10 })
 *
 */
export declare function randProductMaterial<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random product name.
 *
 * @category commerce
 *
 * @example
 *
 * randProductName()
 *
 * @example
 *
 * randProductName({ length: 10 })
 *
 */
export declare function randProductName<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random programming language.
 *
 * @category code
 *
 * @example
 *
 * randProgrammingLanguage()
 *
 * @example
 *
 * randProgrammingLanguage({ length: 10 })
 *
 */
export declare function randProgrammingLanguage<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random pronoun.
 *
 * @category person
 *
 * @example
 *
 * randPronoun()
 *
 */
export declare function randPronoun<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface ProtocolOptions extends FakeOptions {
	fullName?: boolean;
}
/**
 * Generate a random protocol.
 *
 * @category internet
 *
 * @example
 *
 * randProtocol()
 *
 * @example
 *
 * randProtocol({ length: 10 })
 *
 * @example
 *
 * randProtocol({ fullName: true })
 *
 */
export declare function randProtocol<Options extends ProtocolOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random quote.
 *
 * @category text
 *
 * @example
 *
 * randQuote()
 *
 * @example
 *
 * randQuote({ length: 10 })
 *
 */
export declare function randQuote<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random rabbit.
 *
 * @category animals
 *
 * @example
 *
 * randRabbit()
 *
 * @example
 *
 * randRabbit({ length: 10 })
 *
 */
export declare function randRabbit<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Get a random item from array.
 *
 * @category general
 *
 * @example
 *
 * rand([ 1, 2, 3 ])
 *
 * @example
 *
 * rand([ 1, 2, 3 ], { length: 10 })
 *
 */
export declare function rand<T, Options extends FakeOptions = never>(arr: Readonly<T[]>, options?: Options): Return<T, Options>;
/**
 * Create a seed.
 *
 * @category general
 *
 * @example
 *
 * random()
 *
 */
export declare function random(): number;
/**
 * Sets and Resets random seed.
 *
 * @category general
 *
 * @example
 *
 * seed()
 *
 * @example
 *
 * seed('some-constant-seed')
 */
export declare function seed(value?: string): void;
export interface RecentOptions extends FakeOptions {
	days?: number;
}
/**
 * Generate a random recent date.
 *
 * @category date
 *
 * @example
 *
 * randRecentDate()
 *
 * @example
 *
 * randRecentDate({ days: 10 }) // default is 1
 *
 * @example
 *
 * randRecentDate({ length: 10 })
 *
 */
export declare function randRecentDate<Options extends RecentOptions = never>(options?: Options): Return<Date, Options>;
export interface RGBOptions extends FakeOptions {
	alpha?: boolean;
}
/**
 * Generate a random rgb.
 *
 * @category colors
 *
 * @example
 *
 * randRgb()
 *
 * @example
 *
 * randRgb({ alpha: true }) // default is false
 *
 * @example
 *
 * randRgb({ length: 10 })
 *
 */
export declare function randRgb<Options extends RGBOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random user role
 *
 * @category user
 *
 * @example
 *
 * randRole()
 *
 * @example
 *
 * randRole({ length: 10 })
 *
 */
export declare function randRole<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random routing number.
 *
 * @category finance
 *
 * @example
 *
 * randRoutingNumber()
 *
 * @example
 *
 * randRoutingNumber({ length: 10 })
 *
 */
export declare function randRoutingNumber<Options extends FakeOptions = never>(options?: Options): Return<number, Options>;
export interface SemverOptions extends FakeOptions {
	prefix?: string;
}
/**
 * Generate a random semantic version.
 *
 * @category internet
 *
 * @example
 *
 * randSemver()
 *
 * @example
 *
 * randSemver({ length: 10 })
 *
 * @example
 *
 * randSemver({ prefix: 'v' })
 *
 */
export declare function randSemver<Options extends SemverOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random sentence.
 *
 * @category text
 *
 * @example
 *
 * randSentence()
 *
 * @example
 *
 * randSentence({ length: 10 })
 *
 */
export declare function randSentence<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export declare type RandomSequenceOptions = {
	size?: number;
	chars?: string;
} & FakeOptions;
export declare type RandomSequenceOptions2 = {
	size?: number;
	charType?: "numeric" | "alpha" | "alphaNumeric" | "special";
} & FakeOptions;
/**
 * Generate a random sequence.
 *
 * @category general
 *
 * @example
 *
 * randSequence()
 *
 * @example
 *
 * randSequence({ size: 10 })
 *
 * @example
 *
 * randSequence({ chars: 'aAbBcC@#' })
 *
 * @example
 *
 * randSequence({ charType: 'numeric' }) // numeric | alpha | alphaNumeric | special
 *
 * @example
 *
 * randSequence({ length: 10 })
 *
 */
export declare function randSequence<Options extends RandomSequenceOptions = never>(options?: RandomSequenceOptions): Return<string, Options>;
export declare function randSequence<Options extends RandomSequenceOptions2 = never>(options?: RandomSequenceOptions2): Return<string, Options>;
/**
 * Generate a random shape.
 *
 * @category general
 *
 * @example
 *
 * randShape()
 *
 * @example
 *
 * randShape({ length: 10 })
 *
 */
export declare function randShape<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random skill.
 *
 * @category Person
 *
 * @example
 *
 * randSkill()
 *
 * @example
 *
 * randSkill({ length: 10 })
 *
 */
export declare function randSkill<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random slug.
 *
 * @category Internet
 *
 * @example
 *
 * randSlug()
 *
 * @example
 *
 * randSlug({ length: 10 })
 *
 */
export declare function randSlug<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random snake.
 *
 * @category animals
 *
 * @example
 *
 * randSnake()
 *
 * @example
 *
 * randSnake({ length: 10 })
 *
 */
export declare function randSnake<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate random social network
 *
 * @category internet
 *
 * @example
 *
 * randSocial()
 *
 * @example
 *
 * randSocial({ length: 2 })
 *
 *
 */
export declare function randSocial<Options extends FakeOptions = never>(options?: Options): Return<{
	name: string;
	link: string;
}, Options>;
export interface SoonOptions extends FakeOptions {
	days?: number;
}
/**
 * Generate a random soon.
 *
 * @category date
 *
 * @example
 *
 * randSoonDate()
 *
 * @example
 *
 * randSoonDate({ days: 5 }) // default is 1
 *
 * @example
 *
 * randSoonDate({ length: 10 })
 *
 */
export declare function randSoonDate<Options extends SoonOptions = never>(options?: Options): Return<Date, Options>;
export declare type Category = "olympic" | "winterOlympic" | "outdoor";
export interface SportCategories extends FakeOptions {
	category?: Category;
}
/**
 * Generate a random sports.
 *
 * @category sports
 *
 * @example
 *
 * randSports()
 *
 * @example
 *
 * randSports({ category : 'olympic' })
 *
 * @example
 *
 * randSports({ length: 10 })
 *
 */
export declare function randSports<Options extends SportCategories = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random sports team.
 *
 * @category sports
 *
 * @example
 *
 * randSportsTeam()
 *
 * @example
 *
 * randSportsTeam({ length: 10 })
 *
 */
export declare function randSportsTeam<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random state.
 *
 * @category address
 *
 * @example
 *
 * randState()
 *
 * @example
 *
 * randState({ length: 10 })
 *
 */
export declare function randState<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random state abbr.
 *
 * @category address
 *
 * @example
 *
 * randStateAbbr()
 *
 * @example
 *
 * randStateAbbr({ length: 10 })
 *
 */
export declare function randStateAbbr<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export declare type Type = "Project" | "User Story" | "Task";
/**
 * Generate a random status.
 *
 * @category general
 *
 * @example
 *
 * randStatus()
 *
 * @example
 *
 * randStatus({ type: 'User Story' })
 *
 * @example
 *
 * randStatus({ length: 10 })
 *
 */
export declare function randStatus<Options extends FakeOptions & {
	type?: Type;
} = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random street address.
 *
 * @category address
 *
 * @example
 *
 * randStreetAddress()
 *
 * @example
 *
 * randStreetAddress({ length: 10 })
 *
 */
export declare function randStreetAddress<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random street name.
 *
 * @category address
 *
 * @example
 *
 * randStreetName()
 *
 * @example
 *
 * randStreetName({ length: 10 })
 *
 */
export declare function randStreetName<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random subscription plan.
 *
 * @category company
 *
 * @example
 *
 * randSubscriptionPlan()
 *
 * @example
 *
 * randSubscriptionPlan({ length: 10 })
 *
 */
export declare function randSubscriptionPlan<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export declare type ComicBookCompany = "Marvel" | "DC";
export interface SuperheroOptions extends FakeOptions {
	company?: ComicBookCompany;
}
export interface Superhero {
	realName: string;
	alterEgo: string;
	company: string;
}
export interface SuperheroEntity extends Superhero {
	id: string;
}
/**
 * Generate a random superhero.
 *
 * @category entities, comic book
 *
 * @example
 *
 * randSuperhero()
 *
 * @example
 *
 * randSuperhero({ company: 'Marvel' })
 *
 * @example
 *
 * randSuperhero({ length: 10 })
 *
 */
export declare function randSuperhero<Options extends SuperheroOptions = never>(options?: Options): Return<SuperheroEntity, Options>;
/**
 * Generate a random superhero name.
 *
 * @category comic book
 *
 * @example
 *
 * randSuperheroName()
 *
 * @example
 *
 * randSuperhero({ company: 'Marvel' })
 *
 * @example
 *
 * randSuperheroName({ length: 10 })
 *
 */
export declare function randSuperheroName<Options extends SuperheroOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random svg.
 *
 * @category general
 *
 * @example
 *
 * randSvg()
 *
 * @example
 *
 * randSvg({ length: 10 })
 *
 */
export declare function randSvg<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface TextOptions extends FakeOptions {
	charCount?: number;
}
/**
 * Generate a random text.
 *
 * @category text
 *
 * @example
 *
 * randText()
 *
 * @example
 *
 * randText({ length: 10 })
 *
 * @example
 *
 * randText({ charCount: 10 }) // default is 10
 *
 */
export declare function randText<Options extends TextOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random time zone.
 *
 * @category address
 *
 * @example
 *
 * randTimeZone()
 *
 * @example
 *
 * randTimeZone({ length: 10 })
 *
 */
export declare function randTimeZone<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface Todo {
	id: string;
	title: string;
	completed: boolean;
}
/**
 * Generate a random todo.
 *
 * @category entities
 *
 * @example
 *
 * randTodo()
 *
 * @example
 *
 * randTodo({ length: 10 })
 *
 */
export declare function randTodo<Options extends FakeOptions = never>(options?: Options): Return<Todo, Options>;
/**
 * Generate a random transaction type.
 *
 * @category Finance
 *
 * @example
 *
 * randTransactionType()
 *
 * @example
 *
 * randTransactionType({ length: 10 })
 *
 */
export declare function randTransactionType<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random url.
 *
 * @category internet
 *
 * @example
 *
 * randUrl()
 *
 * @example
 *
 * randUrl({ length: 10 })
 *
 */
export declare function randUrl<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random user agent.
 *
 * @category internet
 *
 * @example
 *
 * randUserAgent()
 *
 * @example
 *
 * randUserAgent({ length: 10 })
 *
 */
export declare function randUserAgent<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface UserNameOptions extends FakeOptions {
	firstName?: string;
	lastName?: string;
}
/**
 * Generate a random user name.
 *
 * @category person
 *
 * @example
 *
 * randUserName()
 *
 * @example
 *
 * randUserName({ length: 10 })
 *
 * @example
 *
 * randUserName({ firstName: 'Ryan' })
 *
 * @example
 *
 * randUserName({ lastName: 'Smee' })
 *
 */
export declare function randUserName<Options extends UserNameOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random uuid.
 *
 * @category general, database
 *
 * @example
 *
 * randUuid()
 *
 * @example
 *
 * randUuid({ length: 10 })
 *
 */
export declare function randUuid<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random vehicle.
 *
 * @category vehicle
 *
 * @example
 *
 * randVehicle()
 *
 * @example
 *
 * randVehicle({ length: 10 })
 *
 */
export declare function randVehicle<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random vehicle fuel.
 *
 * @category vehicle
 *
 * @example
 *
 * randVehicleFuel()
 *
 * @example
 *
 * randVehicleFuel({ length: 10 })
 *
 */
export declare function randVehicleFuel<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random vehicle manufacturer.
 *
 * @category vehicle
 *
 * @example
 *
 * randVehicleManufacturer()
 *
 * @example
 *
 * randVehicleManufacturer({ length: 10 })
 *
 */
export declare function randVehicleManufacturer<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random vehicle model.
 *
 * @category vehicle
 *
 * @example
 *
 * randVehicleModel()
 *
 * @example
 *
 * randVehicleModel({ length: 10 })
 *
 */
export declare function randVehicleModel<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random vehicle type.
 *
 * @category vehicle
 *
 * @example
 *
 * randVehicleType()
 *
 * @example
 *
 * randVehicleType({ length: 10 })
 *
 */
export declare function randVehicleType<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random verb.
 *
 * @category text
 *
 * @example
 *
 * randVerb()
 *
 * @example
 *
 * randVerb({ length: 10 })
 *
 */
export declare function randVerb<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random weekday.
 *
 * @category date
 *
 * @example
 *
 * randWeekday()
 *
 * @example
 *
 * randWeekday({ length: 10 })
 *
 */
export declare function randWeekday<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface WordOptions extends FakeOptions {
	capitalize?: boolean;
}
/**
 * Generate a random word.
 *
 * @category text
 *
 * @example
 *
 * randWord()
 *
 * @example
 *
 * randWord({ capitalize: true }) // default is false
 *
 * @example
 *
 * randWord({ length: 10 })
 *
 */
export declare function randWord<Options extends WordOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random zip code.
 *
 * @category address
 *
 * @example
 *
 * randZipCode()
 *
 * @example
 *
 * randZipCode({ length: 10 })
 *
 */
export declare function randZipCode<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random singer.
 *
 * @category music
 *
 * @example
 *
 * randSinger()
 *
 * @example
 *
 * randSinger({ length: 10 })
 *
 */
export declare function randSinger<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random song.
 *
 * @category Music
 *
 * @example
 *
 * randSong()
 *
 * @example
 *
 * randSong({ length: 10 })
 *
 */
export declare function randSong<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface AddressOptions extends FakeOptions {
	includeCounty?: boolean;
	includeCountry?: boolean;
}
export interface Address {
	street: string;
	city: string;
	zipCode: string;
	county?: string;
	country?: string;
}
/**
 * Generate a random address.
 *
 * @category entities, address
 *
 * @example
 *
 * randAddress()
 *
 * @example
 *
 * randAddress({ includeCounty: false }) // default is true
 *
 * @example
 *
 * randAddress({ includeCountry: false }) // default is true
 *
 * @example
 *
 * randAddress({ length: 10 })
 *
 */
export declare function randAddress<Options extends AddressOptions = never>(options?: Options): Return<Address, Options>;
/**
 * Generate a random full address.
 *
 * @category Address
 *
 * @example
 *
 * randFullAddress()
 *
 * @example
 *
 * randFullAddress({ includeCounty: false }) // default is true
 *
 * @example
 *
 * randFullAddress({ includeCountry: false }) // default is true
 *
 * @example
 *
 * randFullAddress({ length: 10 })
 *
 */
export declare function randFullAddress<Options extends AddressOptions = never>(options?: Options): Return<string, Options>;
export interface RandomJSONOptions extends FakeOptions {
	totalKeys?: number;
	minKeys?: number;
	maxKeys?: number;
}
/**
 * Generate a random JSON Object.
 *
 * @category Datatype
 *
 * @example
 * randJSON()
 *
 * @example If a fixed number of keys are required
 *
 * randJSON({ totalKeys: 10 })
 *
 * @example If a random number of keys are required
 *
 * randJSON({ minKeys: 1, maxKeys: 10 })
 *
 */
export declare function randJSON<Options extends RandomJSONOptions = never>(options?: Options): Return<{
	[key: string]: any;
}, Options>;
declare const CODE_SNIPPET_LANGUAGES: readonly [
	"bash",
	"c",
	"c#",
	"c++",
	"go",
	"html",
	"java",
	"javascript",
	"php",
	"python",
	"rust",
	"sql",
	"swift"
];
export declare type CodeSnippetLang = typeof CODE_SNIPPET_LANGUAGES[number];
export interface CodeSnippetOptions extends FakeOptions {
	lang?: CodeSnippetLang;
}
/**
 * Generate a random code snippet.
 *
 * @category code
 *
 * @example
 *
 * randCodeSnippet()
 *
 * @example
 *
 * randCodeSnippet({ length: 10 })
 *
 * @example
 *
 * randCodeSnippet({ lang: 'html' }) // default is 'javascript'
 *
 */
export declare function randCodeSnippet<Options extends CodeSnippetOptions = never>(options?: Options): Return<string, Options>;
export interface TextRangeOptions extends FakeOptions {
	min: number;
	max: number;
}
/**
 * Generate a random text range.
 *
 * @category text
 *
 * @example
 *
 * randTextRange({ min: 10, max: 100 })
 *
 * @example
 *
 * randTextRange({ min: 10, max: 100, length: 10 })
 *
 */
export declare function randTextRange<Options extends TextRangeOptions = never>(options: Options): Return<string, Options>;
export declare type Airline = "RyanAir" | "British Airways" | "Iberia" | "EasyJet" | "Jet2" | "Emirates" | "American Airlines" | "JetBlue" | "Air Europa" | "Delta Air Lines" | "United Airlines" | "Thai Airways" | "Qatar Airways" | "Virgin Atlantic";
export interface FlightNumberOptions extends FakeOptions {
	airline?: Airline;
}
/**
 * Generate a random flight number.
 *
 * @category flight
 *
 * @example
 *
 * randFlightNumber()
 *
 * @example
 *
 * randFlightNumber({ airline: 'RyanAir' })
 *
 * @example
 *
 * randFlightNumber({ length: 10 })
 *
 */
export declare function randFlightNumber<Options extends FlightNumberOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random airline.
 *
 * @category flight
 *
 * @example
 *
 * randAirline()
 *
 * @example
 *
 * randAirline({ length: 10 })
 *
 */
export declare function randAirline<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface Airport {
	name: string;
	code: string;
	city: string;
	country: string;
}
/**
 * Generate a random airport.
 *
 * @category flight
 *
 * @example
 *
 * randAirport()
 *
 * @example
 *
 * randAirport({ length: 10 })
 *
 */
export declare function randAirport<Options extends FakeOptions = never>(options?: Options): Return<{
	name: string;
	code: string;
	city: string;
	country: string;
}, Options>;
export interface FlightDetailsOptions extends FakeOptions {
	airline?: Airline;
	passenger?: string;
}
export interface FlightDetails {
	passenger: string;
	airline: string;
	flightNumber: string;
	origin: Airport;
	destination: Airport;
	date: string;
	seat: string;
	flightLength: number;
}
/**
 * Generate a random flight details.
 *
 * @category flight, entities
 *
 * @example
 *
 * randFlightDetails()
 *
 * @example
 *
 * randFlightDetails({ passenger: 'Ryan Smee' })
 *
 * @example
 *
 * randFlightDetails({ airline: 'RyanAir' })
 *
 * @example
 *
 * randFlightDetails({ length: 10 })
 *
 */
export declare function randFlightDetails<Options extends FlightDetailsOptions = never>(options?: Options): Return<FlightDetails, Options>;
/**
 * Generate a random seat number.
 *
 * @category flight
 *
 * @example
 *
 * randSeatNumber()
 *
 * @example
 *
 * randSeatNumber({ length: 10 })
 *
 */
export declare function randSeatNumber<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random airport name.
 *
 * @category flight
 *
 * @example
 *
 * randAirportName()
 *
 * @example
 *
 * randAirportName({ length: 10 })
 *
 */
export declare function randAirportName<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
/**
 * Generate a random airport code.
 *
 * @category flight
 *
 * @example
 *
 * randAirportCode()
 *
 * @example
 *
 * randAirportCode({ length: 10 })
 *
 */
export declare function randAirportCode<Options extends FakeOptions = never>(options?: Options): Return<string, Options>;
export interface CreditCardOptions extends FakeOptions {
	fullName?: string;
	brand?: Brand;
}
export interface CreditCard {
	ccv: string;
	brand: string;
	number: string;
	account: string;
	fullName: string;
	type: "Credit" | "Debit";
	validFrom: string;
	untilEnd: string;
}
/**
 * Generate a random credit card.
 *
 * @category finance, entities
 *
 * @example
 *
 * randCreditCard()
 *
 * @example
 *
 * randCreditCard({ fullName: 'Mr Ryan Smee' })
 *
 * @example
 *
 * randCreditCard({ brand: 'Visa' })
 *
 * @example
 *
 * randCreditCard({ length: 10 })
 *
 */
export declare function randCreditCard<Options extends CreditCardOptions = never>(options?: Options): Return<CreditCard, Options>;
export interface IncrementalNumberOptions {
	from: number;
	to?: number;
	step: number;
}
/**
 * Generate incremental numbers.
 *
 * @category factories
 *
 * @example
 *
 * const factory = incrementalNumber()
 * factory() // returns 1
 * factory() // returns 2
 *
 * @example
 *
 * const factory = incrementalNumber({from: 10, to: 100, step: 10})
 * factory() // returns 10
 * factory() // returns 20
 * ...
 *
 */
export declare function incrementalNumber(options: Required<IncrementalNumberOptions>): () => number | undefined;
export declare function incrementalNumber(options?: IncrementalNumberOptions): () => number;
export interface IncrementalDateOptions {
	from: Date | string | number;
	to?: Date | string | number;
	step: number;
}
/**
 * Generate incremental numbers.
 *
 * @category factories
 *
 * @example
 *
 * const factory = incrementalDate()
 * // seeds factory with new Date()
 * factory() // returns seed
 * factory() // returns seed + 1 day
 *
 * @example
 *
 * const factory = incrementalDate({from: new Date(2022,1,1), to: new Date(2022,1,3), step: 10})
 * // seeds factory with `from` value
 * factory() // returns seed
 * factory() // returns seed + 10ms
 * ...
 *
 */
export declare function incrementalDate(options: Required<IncrementalDateOptions>): () => Date | undefined;
export declare function incrementalDate(options?: IncrementalDateOptions): () => Date;
export interface RandomAggregationOptions extends RandomInRangeOptions, FakeOptions {
	totalValue?: number;
	noZeros?: boolean;
}
export declare type Tuple<V, N extends number, T extends V[] = [
]> = N extends T["length"] ? T : Tuple<V, N, [
	...T,
	V
]>;
/**
 * Generate a list of numbers that add up to a total value.
 *
 * @category general, math
 *
 * @example
 *
 * randAggregation() // default values is 2 and totalValue is 100
 *
 * @example
 *
 * randAggregation({ values: 3, totalValue: 1500, length: 10 })
 *
 * @example
 *
 * randAggregation({ values: 3 })
 *
 */
export declare function randAggregation<T extends number = 2, Options extends RandomAggregationOptions = never>(options?: Options & {
	values?: T;
}): Return<number extends T ? number[] : Tuple<number, T, [
]>, Options & {
	values?: T | undefined;
}>;
export interface RandChangeBooleanOptions extends FakeOptions {
	chanceTrue?: number;
	chanceFalse?: number;
}
/**
 * Generate a random chance boolean.
 *
 * @category general
 *
 * @example
 *
 * randChanceBoolean({ chanceTrue: 0.78 }) // Will be true 78% of times
 *
 * @example
 *
 * randChanceBoolean({ chanceFalse: 0.156 }) // Will be false 15.6% of times
 *
 * @example
 *
 * randChanceBoolean({ length: 10 })
 *
 */
export declare function randChanceBoolean<Options extends RandChangeBooleanOptions = never>(options?: Options): Return<boolean, Options>;
/**
 * Generate a collection from a custom generators functions
 *
 * @category util
 *
 * @example
 *
 * toCollection(() => {
 *   return { data: randNumber(); }
 * })
 *
 * @example
 *
 * toCollection(() => {
 *   return { data: randNumber(); }
 * }, { length: 10 }) // default is no length.
 *
 */
export declare function toCollection<Collection = never, Options extends FakeOptions = never>(generateCollection: (options?: Options) => Collection, options?: Options): Collection | Collection[];
export interface AbnOptions extends FakeOptions {
	/**
	 * Will generate only valid ABN's when `true`, otherwise randomised between valid and invalid.
	 */
	onlyValid?: boolean;
}
/**
 * Generate a random abn.
 *
 * @category Finance
 *
 * @example
 *
 * randAbn()
 *
 * @example
 *
 * randAbn({ length: 10 })
 *
 * @example
 *
 * randAbn({ onlyValid: false }) //default is true
 */
export declare function randAbn<Options extends AbnOptions = never>(options?: Options): Return<string, Options>;

export {};
