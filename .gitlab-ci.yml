stages:
    - test
    - prepare
    - build

include:
    - template: Security/Secret-Detection.gitlab-ci.yml

image: node:lts-alpine

eslint:
    stage: test
    interruptible: true
    script:
        - cd back
        - npm i
        - ./node_modules/.bin/eslint . || true

.common: &common
    rules:
        -   if: $CI_COMMIT_TAG
        -   if: $CI_COMMIT_BRANCH == "main"
        -   if: $CI_COMMIT_BRANCH == "dev"
    interruptible: true
    before_script:
        - printenv
        - sed -i "s/PACKAGE_VERSION/$(date '+%y.%m.%d')/g" **/package.json

prepare:
    <<: *common
    stage: prepare
    image: node:alpine
    script:
        - apk add --no-cache --upgrade bash git
        - corepack enable && corepack prepare pnpm@latest --activate
        - cd front
        - pnpm install --prod --frozen-lockfile
        - pnpm run build
        - ./changeLog.sh 2d3cf36c03dfda72765ada56cea1310c6a58f139 > ./dist/webdb/changelog.html
    artifacts:
        paths:
            - ./dist/webdb

binaries:
    <<: *common
    stage: build
    tags:
        - saas-macos-medium-m1
    image: macos-12-xcode-14
    script:
        - curl "https://nodejs.org/dist/latest/node-${VERSION:-$(wget -qO- https://nodejs.org/dist/latest/ | sed -nE 's|.*>node-(.*)\.pkg</a>.*|\1|p')}.pkg" > "$HOME/Downloads/node-latest.pkg" && sudo installer -store -pkg "$HOME/Downloads/node-latest.pkg" -target "/"
        - cd back
        - cp ../dist/webdb/* ./src/front/
        - cp .env.production .env
        - npm install --prod --frozen-lockfile
        - npm run obfuscate
        - npm run dist
    artifacts:
        paths:
            - ./dist/

gitlab:release:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    rules:
        -   if: $CI_COMMIT_TAG
        -   if: $CI_COMMIT_BRANCH == "main"
        -   if: $CI_COMMIT_BRANCH == "dev"
    script:
        - echo "running release_job"
    release:
        name: 'Release $TAG'
        description: 'Created using the release-cli $EXTRA_DESCRIPTION'
        tag_name: '$TAG'
        ref: '$CI_COMMIT_SHA'


docker:
    <<: *common
    stage: build
    variables:
        IMAGE_NAME: webdb/app
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    image: docker:latest
    services:
        - docker:dind
    script:
        - cd back
        - cp ../dist/webdb/* ./src/front/
        - docker login -u 'webdb' -p $DOCKER_PASS
        - docker buildx create --use
        - '[[ $CI_COMMIT_REF_NAME != "main" ]] && docker buildx build --cache-from $IMAGE_NAME:$CI_COMMIT_REF_NAME --platform linux/arm64,linux/amd64 -t $IMAGE_NAME:$CI_COMMIT_REF_NAME --push .'
        - '[[ $CI_COMMIT_REF_NAME == "main" ]] && docker buildx build --cache-from $IMAGE_NAME:$CI_COMMIT_REF_NAME --platform linux/arm64,linux/amd64 -t $IMAGE_NAME:$CI_COMMIT_REF_NAME -t $IMAGE_NAME --push .'
