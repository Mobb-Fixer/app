stages:
    - test
    - prepare
    - build
    - release

include:
    - template: Security/Secret-Detection.gitlab-ci.yml

.common: &common
    rules:
        -   if: $CI_COMMIT_TAG
        -   if: $CI_COMMIT_BRANCH == "main"
        -   if: $CI_COMMIT_BRANCH == "dev"
    interruptible: true
    before_script:
        - printenv
        - sed -i "s/PACKAGE_VERSION/$(date '+%y.%m.%d')/g" **/package.json


#-----------------------------------------


eslint:
    stage: test
    image: registry.gitlab.com/pipeline-components/eslint:latest
    script:
        - cd back
        - eslint --color .


#-----------------------------------------


prepare:
    <<: *common
    stage: prepare
    image: node:alpine
    script:
        - apk add --no-cache --upgrade bash git
        - corepack enable && corepack prepare pnpm@latest --activate
        - cd front
        - pnpm install --prod --frozen-lockfile
        - pnpm run build
        - ./changeLog.sh 2d3cf36c03dfda72765ada56cea1310c6a58f139 > ./dist/webdb/changelog.html
    artifacts:
        paths:
            - ./front/dist/webdb/


#-----------------------------------------


binaries:
    <<: *common
    dependencies:
        - prepare
    stage: build
    tags:
        - mbp
    script:
        - cp -fr ./front/dist/webdb/* ./back/src/front/
        - cd back
        - cp .env.production .env
        - npm install --prod --frozen-lockfile
        - npm run obfuscate
        - npm run binaries:linux
        - npm run binaries:macos
    artifacts:
        paths:
            - ./back/out/make/

docker:
    <<: *common
    dependencies:
        - prepare
    stage: build
    variables:
        IMAGE_NAME: webdb/app
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    image: docker:latest
    services:
        - docker:dind
    script:
        - cp -fr ./front/dist/webdb/* ./back/src/front/
        - rm ./back/src/shared/common-helper.mjs && cp common-helper.mjs ./back/src/shared/common-helper.mjs
        - cd back
        - docker login -u 'webdb' -p $DOCKER_PASS
        - docker buildx create --use
        - >
            if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
                docker buildx build --cache-from $IMAGE_NAME:$CI_COMMIT_REF_NAME --platform linux/arm64,linux/amd64 -t $IMAGE_NAME:$CI_COMMIT_REF_NAME -t $IMAGE_NAME --push .
            else
                docker buildx build --cache-from $IMAGE_NAME:$CI_COMMIT_REF_NAME --platform linux/arm64,linux/amd64 -t $IMAGE_NAME:$CI_COMMIT_REF_NAME --push .
            fi

#-----------------------------------------


release:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    dependencies:
        - binaries
    rules:
        -   if: $CI_COMMIT_TAG
        -   if: $CI_COMMIT_BRANCH == "main"
        -   if: $CI_COMMIT_BRANCH == "dev"
    variables:
        TAG: "$(date '+%y.%m.%d')"
    script:
        - echo "Create Release $TAG"
        - echo $JOB_ID
    release:
        name: 'Release $TAG'
        tag_name: '$TAG'
        ref: '$TAG'
        description: 'Release $TAG'
        assets:
            links:
                -   name: "WebDB-$TAG-arm64.dmg"
                    url: "https://gitlab.com/web-db/app/-/jobs/$JOB_ID/artifacts/download"
                -   name: "WebDB-$TAG-x64.dmg"
                    url: "https://gitlab.com/web-db/app/-/jobs/$JOB_ID/artifacts/download"
                -   name: "deb/arm64/webdb_$TAG_arm64.deb"
                    url: "https://gitlab.com/web-db/app/-/jobs/$JOB_ID/artifacts/download"
                -   name: "deb/x64/webdb_$TAG_x64.deb"
                    url: "https://gitlab.com/web-db/app/-/jobs/$JOB_ID/artifacts/download"
